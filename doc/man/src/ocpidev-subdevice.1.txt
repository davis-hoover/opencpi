OCPIDEV-SUBDEVICE(1)
===================


NAME
----
ocpidev-subdevice - manage an OpenCPI HDL subdevice worker.


SYNOPSIS
--------
*`ocpidev`* ['<options>'] '<verb>' *`hdl subdevice`* '<name>'


DESCRIPTION
-----------
The *`hdl subdevice`* noun represents an OpenCPI HDL subdevice worker,
which is a specialized HDL device worker that enables multiple HDL
device workers to share some underlying hardware, like shared resets,
shared SPI or I2C buses. HDL subdevice workers also allow HDL device workers
to remain portable when low-level modules differ by HDL platform or card.

HDL subdevice workers can have a one-to-one or a one-to-many relationship
with HDL device workers. An HDL subdevice worker is instantiated whenever
any of the HDL device workers it supports is instantiated in a platform
configuration or container. HDL platforms and cards specify which
HDL subdevice workers are present, allowing different HDL subdevice
workers to be used for HDL different platforms while leaving
the HDL device workers untouched and reused.

An HDL subdevice worker is described by a minimal OpenCPI Worker Description (OWD)
that defines:

- The hardware FPGA pins to which the subdevice worker is attached; these are the pins
that are shared between the HDL device workers that the HDL subdevice worker supports

- The HDL device worker(s) that the subdevice worker supports

- How the subdevice worker is connected to each of the device workers it supports

The section "Device Support for FPGA Platforms" in the 'OpenCPI Platform Development Guide'
describes the XML elements that specify these aspects of an HDL subdevice worker.

In a project, an HDL subdevice device worker resides in its own directory
'<name>'*`.hdl`* in one of the following locations depending on its intended use:

- In the HDL library *`hdl/devices/`* when the
HDL subdevice worker is platform-independent.

- In the HDL library *`platforms/`*'<hdl-platform>'*`/devices/`*
when the HDL subdevice worker is specific to a platform.

- In the subdirectory *`hdl/cards/`* when the HDL subdevice
worker is specific to or can only be used on cards.

Verbs that can operate on an HDL subdevice worker are:

*`build`*::
    Compile the HDL subdevice worker source code, creating files and directories
    as required.
    
*`clean`*::
    Remove all generated and compiled files for the HDL subdevice worker.

*`create`*::
    Create the named HDL subdevice worker, creating files and directories as required.

*`delete`*::
    Remove all directories and files associated with the named HDL subdevice worker.

Note that the *`utilization`* verb can be used with the *`worker`* noun to display
an HDL subdevice worker's FPGA usage statistics. See link:ocpidev-worker.1.html[ocpidev-worker(1)]
for more information.

Like all OpenCPI workers, an HDL subdevice worker's directory contains
its "make" file (named Makefile), its OWD (named '<name>'*`.xml`*),
and its primary source code file (named '<name>'*`.vhd`*.)
The *`ocpidev create`* operation produces initial versions
of these files that can then be edited as necessary to produce the
HDL subdevice worker implementation.

The *`ocpidev build`* operation for an HDL subdevice worker creates
the same or similar additional files in the HDL subdevice worker's
directory as it does for any OpenCPI worker and the *`ocpidev clean`*
operation removes these files. See link:ocpidev-worker.1.html[ocpidev-worker(1)]
for details.

Note that an asset's name is implied by the directory you're in when
you issue the *`ocpidev`* command. For HDL subdevice workers, this means that you can
perform operations (verbs) on the HDL subdevice worker without having to specify its
name when you issue the *`ocpidev`* command from inside the HDL subdevice worker directory.

OPTIONS
-------
In the descriptions below, a plus sign (+) after the option indicates
that it can be specified more than once on the command line.

Keywords for platforms supported by OpenCPI that can be
specified in the '<platform>' argument to an option
can be found in the tables of supported platforms in the 'OpenCPI User Guide'.

Keywords for architectures supported by OpenCPI that can be specified
in the '<target>' argument to an option include *`isim`*, *`modelsim`*,
*`xsim`*, *`stratix4`*, *`stratix5`*, *`virtex5`*, *`virtex6`*, *`zynq`*,
*`zynq_is`*, *`spartan3adsp`*.

Options That Apply to All Operations (Verbs) on HDL Subdevice Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`--hdl-library=`*'<hdl-library>', *`-h`* '<hdl-library>'::
    Specify the HDL library in which to operate on the HDL subdevice worker.

*`-P`* '<hdl-platform-directory>'::
    Specify the HDL platform subdirectory in which
    to operate on the HDL subdevice worker.

*`-d`* '<directory>'::
    Specify the directory in which the command should be run.
    Analogous to the *-C* option in the POSIX *make* command.
    
*`-v`*, *`--verbose`*::
    Describe what is happening in command execution in more detail.

Options When Creating HDL Subdevice Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All the options for creating an HDL device worker apply to creating
an HDL subdevice worker with the exception of the *`-E`* option (create
an HDL device emulator) and the -S option (specify component spec).
See link:ocpidev-device.1.html[ocpidev-device(1)].

Options When Deleting HDL Subdevice Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`-f`*::
    Force deletion: do not ask for confirmation when deleting
    a worker. Normally, you are asked to confirm a deletion.

Options When Building HDL Subdevice Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`--hdl-target=`*'<target>'+::
    Build the HDL subdevice worker for the specified HDL architecture.

*`--hdl-platform=`*'<hdl-platform>'+::
    Build the HDL subdevice worker for the specified HDL platform.


EXAMPLES
--------
. Create a platform-independent HDL subdevice worker
named *`mysubdevice`* that implements the *`mydevclass`* OCS:
+
--------------------------------------------------------------------------------
ocpidev create hdl subdevice mysubdevice.hdl -S mycomp-spec --hdl-library=devices
--------------------------------------------------------------------------------
+
. Create a platform-independent HDL subdevice worker named *`mysubdevice`*
that implements the *`mycard`* card specification:
+
------------------------------------------------------------------------------
ocpidev create hdl subdevice mysubdevice.hdl -S mycard-spec --hdl-library=cards
-----------------------------------------------------------------------------
+
. Create an HDL subdevice worker named *`mysubdevice`* that implements the
*`mydevicecomp`*  OCS for the *`myplatform`* platform:
+
--------------------------------------------------------------------------
ocpidev create hdl subdevice mysubdevice.hdl -S mydevicecomp -P myplatform
-------------------------------------------------------------------------
+
. In the subdevice's directory, compile the subdevice's source code:
+
------------------------
ocpidev build subdevice
------------------------
+
. In the project that contains the subdevice, compile
the source code for the subdevice named *`mysubdevice`*
for the *`zed`* platform:
+
-----------------------------------------------------------
ocpidev build subdevice mywsubdevice.hdl --hdl-platform=zed
-----------------------------------------------------------
+
. In the project that contains the subdevice, compile
the source code for the subdevice named *`mysubdevice`*
for the Zynq HDL architecture:
+
---------------------------------------------------------
ocpidev build subdevice mysubdevice.hdl --hdl-target=zynq
---------------------------------------------------------
+
. Inside the subdevice's directory, remove the compiled
source code for the subdevice named *`mysubdevice`*:
+
-----------------------
ocpidev clean subdevice
-----------------------


BUGS
----
See https://www.opencpi.org/report-defects


RESOURCES
---------
See the main web site: https://www.opencpi.org


SEE ALSO
--------
link:ocpidev.1.html[ocpidev(1)]
link:ocpidev-application.1.html[ocpidev-application(1)]
link:ocpidev-assembly.1.html[ocpidev-assembly(1)]
link:ocpidev-card.1.html[ocpidev-card(1)]
link:ocpidev-build.1.html[ocpidev-build(1)]
link:ocpidev-clean.1.html[ocpidev-clean(1)]
link:ocpidev-component.1.html[ocpidev-component(1)]
link:ocpidev-create.1.html[ocpidev-create(1)]
link:ocpidev-delete.1.html[ocpidev-delete(1)]
link:ocpidev-device.1.html[ocpidev-device(1)]
link:ocpidev-library.1.html[ocpidev-library(1)]
link:ocpidev-platform.1.html[ocpidev-platform(1)]
link:ocpidev-primitive.1.html[ocpidev-primitive(1)]
link:ocpidev-project.1.html[ocpidev-project(1)]
link:ocpidev-slot.1.html[ocpidev-slot(1)]
link:ocpidev-worker.1.html[ocpidev-worker(1)]

COPYING
-------
Copyright \(C) 2020 OpenCPI www.opencpi.org. OpenCPI is free software:
you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.
