OCPIDEV-DEVICE(1)
================


NAME
----
ocpidev-device - manage an OpenCPI HDL device worker.


SYNOPSIS
--------
*`ocpidev`* ['<options>'] '<verb>' *`hdl device`* '<name>'


DESCRIPTION
-----------
The *`hdl device`* noun represents an OpenCPI HDL device worker, which is
a special type of HDL application worker that supports
external devices attached to an FPGA. The 'OpenCPI Platform Development Guide'
provides details on how to develop an HDL device worker.

An HDL device worker is described by an OpenCPI Worker Description (OWD), which
is an XML file that specifies the component that the worker implements,
the language used for its source code, and any additional property
and port information that fine-tunes the component specification (OCS)
for the worker. XXXX TBD EDIT THIS FOR DEVICE WORKER XXXXX

In a project, an HDL device worker generally resides in its own directory
'<name>'*`.hdl`* located either within the main HDL device library at
*`hdl/devices/`* or within a platform-specific HDL device library at
*`platforms/`*'<hdl-platform>'*`/devices/`*.

XXXXX TBD EDIT FOR HDL DEVICE WORKER XXXXX



Verbs that can operate on an HDL device worker are:

XXXXX TBD - UPDATE ALL BELOW FOR HDL DEVICE WORKER - XXXXXX

*`build`*::
    Compile the worker source code, creating files and directories
    as required. A single worker implementation generally exists
    in its own directory and when compiled, results in a single
    'artifact' (a binary executable compiled from the worker),
    although some authoring models (for example, RCC) allow
    multiple workers to be built as a single artifact.
    
*`clean`*::
    Remove all generated and compiled files for the worker.

*`create`*::
    Create the named worker, creating files and directories as required.
    The worker is created in a directory '<name>'*`.`*'<authoring-model-suffix>'
    under the current working directory where *`ocpidev`* 
    is executed. The general-purpose option *`-d`* '<directory>'
    can be used to create the worker under a different directory.
    Note that multiple workers that implement the same component must
    have different names and at least one of the names must be different
    from the name implied by the component specification.

*`delete`*::
    Remove all directories and files associated with the named worker.

Within the worker's directory are the worker's "make" file (named Makefile),
its OWD (named '<name>'*`.xml`*) and its primary source code file (named
'<name>'*`.`*'<auth-model-language-suffix>', for example, *`.c`*, *`.cc`*
or *`vhd`*). The *`ocpidev create`* operation produces initial versions
of these files that can then be edited as necessary to produce the worker
implementation.

The *`ocpidev build`* operation creates additional files in a worker's directory,
such as architecture-independent source code and XML files, in a directory
named *`gen`* and architecture-specific object and binary files for
the compilation target being built, in a directory named
*`target-`*'<platform>'; for example, *`target-centos7`* or *`target-xsim`*.
These are the files that the *`ocpidev clean`* operation removes.

For general information on how to develop a worker, see the chapters
"Introduction to Worker Development" and "Developing Workers"
in the 'OpenCPI Component Development Guide'. For detailed information
on the OpenCPI authoring models and how to use them to develop worker
source code, see the 'OpenCPI RCC Development Guide', the
'OpenCPI HDL Development Guide', and the 'OpenCPI OpenCL
Development Guide' (OpenCL is currently an experimental
authoring model).

Note that an asset's name is implied by the directory you're in when
you issue the *`ocpidev`* command. For workers, this means that you can
perform operations (verbs) on the worker without having to specify its
name when you issue the *`ocpidev`* command from inside the worker directory.

OPTIONS
-------
In the descriptions below, a plus sign (+) after the option indicates
that it can be specified more than once on the command line.

Keywords for platforms supported by OpenCPI that can be
specified in the '<platform>' argument to an option
can be found in the tables of supported platforms in the 'OpenCPI User Guide'.

Keywords for architectures supported by OpenCPI that can be specified
in the '<target>' argument to an option include *`isim`*, *`modelsim`*,
*`xsim`*, *`stratix4`*, *`stratix5`*, *`virtex5`*, *`virtex6`*, *`zynq`*,
*`zynq_is`*, *`spartan3adsp`*.

Options That Apply to All Operations (Verbs) on HDL Devices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`--hdl-library=`*'<hdl-library>'::
    Specify the HDL library in which to operate on the HDL device worker.
    [This option doesn't make sense for an HDL device worker. It'll
    always be /hdl/devices unless it's the platform-specific devices/
    library and there's the -P option for that.]

*`--library=`*'<component-library>', *`-l`* '<component-library>'::
    Specify the component library in which to operate on the HDL
    device worker.
    When a project contains multiple component libraries, this option
    can be used to specify one of them. Multiple component
    libraries are located underneath the *`components`* directory
    at the top level of a project. [???applicable to device worker???
    Because it refers to an emulator in a library?]

*`-d`* '<directory>'::
    Specify the directory in which the command should be run.
    Analogous to the *-C* option in the POSIX *make* command.
    
*`-v`*, *`--verbose`*::
    Describe what is happening in command execution in more detail.

Options When Creating HDL Device Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`--exclude-platform=`*'<platform>', *`-Q`* '<platform>'+::
    Do not build the HDL device worker for the specified platform. See
    also the description of the *`ExcludePlatforms=`* OWD attribute
    in the 'OpenCPI Component Development Guide'.

*`--only-platform=`*'<platform>', *`-G`* '<platform>'+::
    Only build the HDL device worker for the specified platform. See also
    the description of the *`OnlyPlatforms`* OWD attribute in
    the 'OpenCPI Component Development Guide'.

*`-A`* '<directory>'+::
    Specify a directory to search for XML include files.

*`-C`* '<core>'+::
    Specify an HDL primitive core on which the HDL device
    worker depends and with which it should be built.

*`-I`* '<directory>'+::
    Specify a directory to search for include files (C, C++,
    Verilog).

*`-L`* '<language>'::
    Specify the source language for the HDL device worker being
    created. By default, the worker is created for
    the default language for the authoring model, which
    must be C or C++ for RCC workers and VHDL for HDL workers.

*`-O`* '<file>'+::
    Specify a source code file to compile when building the
    device worker that is not included by default; that is, in
    addition to the '<name>'*`.`*'<authoring-language-suffix>' file.

*`-P`* '<hdl-platform>'::
    Specify that the HDL device being created is a
    platform-specific HDL device or HDL device proxy
    to be be created in the *`devices/`*
    library underneath the specified HDL platform's
    directory in the project. Portable device workers
    that are not platform-specific do not use this option.

*`-S`* '<component-spec>'::
    Specify the component spec (OCS) that the HDL device worker implements.
    The default is '<name>'*`-spec`* or '<name>'*`_spec`*
    depending on what *`ocpidev`* finds in the *`specs`* directory
    of the library or project (or libraries specified with the *`-y`*
    option or other projects specified by the *`-D`* option when the
    project that contains the HDL device worker was created).
   
*`-T`* '<target>'+::
    Only build the HDL device worker for the specified
    architecture. See also the
    description of the *`OnlyTargets`* OWD attribute in the 'OpenCPI
    Component Development Guide'.

*`-Y`* '<primitive-library>'+::
    Specify an HDL primitive library on which the HDL device worker
    depends.
   
*`-Z`* '<target>'+::
    Do not build the HDL device worker for the specified
    architecture. See also
    the description of the *`ExcludeTargets`* OWD attribute in
    the 'OpenCPI Component Development Guide'.

*`-k`*::
    Keep files and directories created after an HDL device worker creation
    fails. Normally, all such files and directories are removed
    on any failure.

*`-y`* '<component-library>'+::
   Specify a component library to search for workers, devices
   and/or specs that this HDL device worker references.

Options When Deleting HDL Device Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*`-f`*::
    Force deletion: do not ask for confirmation when deleting
    a worker. Normally, you are asked to confirm a deletion.

Options When Building HDL Device Workers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




EXAMPLES
--------
. Create an HDL device worker named *`mydevice`* that should
run on the HDL platform *`myplatform`*:
+
---------------------------------------------------
ocpidev create hdl device mydevice.hdl -P myplatform
--------------------------------------------------
+
. Create an HDL device worker named *`mydevice`* that implements
the *`mycomp`* spec:
+
---------------------------------------
ocpidev create worker mydevice.hdl xxx
---------------------------------------
+
. In the HDL device worker's directory, compile
the worker's source code:
+
------------------------
ocpidev build hdl device
------------------------
+
. In the project that contains the worker, compile
the source code for the RCC worker named *`myworker`*
for the centOS7 platform:
+
-------------------------------------------------------
ocpidev build worker myworker.rcc --rcc-platform=centos7
-------------------------------------------------------
+
. In the project that contains the worker, compile
the source code for the RCC worker named *`myworker`*
for the RCC platform side of the Zynq SoC chip family:
+
------------------------------------------
ocpidev build hdl device mydevice.hdl
------------------------------------------
+
. Inside the worker's directory, remove the compiled
worker source code for the worker named *`myworker`*:
+
--------------------
ocpidev clean worker
--------------------


BUGS
----
See https://www.opencpi.org/report-defects


RESOURCES
---------
See the main web site: https://www.opencpi.org


SEE ALSO
--------
link:ocpidev.1.html[ocpidev(1)]
link:ocpidev-application.1.html[ocpidev-application(1)]
link:ocpidev-build.1.html[ocpidev-build(1)]
link:ocpidev-clean.1.html[ocpidev-clean(1)]
link:ocpidev-component.1.html[ocpidev-component(1)]
link:ocpidev-create.1.html[ocpidev-create(1)]
link:ocpidev-delete.1.html[ocpidev-delete(1)]
link:ocpidev-library.1.html[ocpidev-library(1)]
link:ocpidev-platform.1.html[ocpidev-platform(1)]
link:ocpidev-primitive.1.html[ocpidev-primitive(1)]
link:ocpidev-project.1.html[ocpidev-project(1)]
link:ocpidev-show.1.html[ocpidev-show(1)]
link:ocpidev-utilization.1.html[ocpidev-utilization(1)]
link:ocpidev-workers.1.html[ocpidev-worker(1)]


COPYING
-------
Copyright \(C) 2020 OpenCPI www.opencpi.org. OpenCPI is free software:
you can redistribute it and/or modify it under the terms of the
GNU Lesser General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your
option) any later version.
