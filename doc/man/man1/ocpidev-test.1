.\"     Title: ocpidev-test
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 07/14/2020
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "OCPIDEV\-TEST" "1" "07/14/2020" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ocpidev-test \- manage an OpenCPI component unit test suite\&.
.SH "SYNOPSIS"
.sp
\fBocpidev\fR [\fI<options>\fR] \fI<verb>\fR \fBtest\fR \fI<name>\fR
.SH "DESCRIPTION"
.sp
The \fBtest\fR noun represents an OpenCPI component unit test suite, which is a collection of \fItest cases\fR for testing all workers that implement the a single component specification (OCS) across all available platforms for which the workers have been built\&. The workers tested by the component unit test suite can be written to different authoring models or languages or can be different source code implementations of the same component specification\&. As long as they implement the same component specification, they can be tested with the same unit test suite\&.
.sp
A \fItest case\fR is a parameterized test that uses a defined set of inputs or generation scripts and a defined set of outputs or verification scripts using a defined matrix of property values\&. OpenCPI supplies a default test case that tests all parameter combinations as derived from all worker parameter/build configurations or all workers\&. A developer can supply runtime property settings with multiple values for each, resulting in the cross\-product of subcases\&. The default test case has one generation script and one verification script, per port, parameterized by \fItest subcase\fR (specific test) property values\&.
.sp
A component unit test suite has five phases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Generate: generate testing artifacts after finding the OCS and the workers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Build: build HDL bitstream/executable artifacts for testing\&. This phase is only meaningful for test suites that operate on HDL workers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Prepare: examine available built workers and available platforms, creating execution scripts to use them all for executing feasible tests\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run: execute tests for all workers, configurations, test cases and platforms\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Verify: verify results from the execution of tests on workers and platforms\&.
.RE
.sp
The \fB\-\-mode=\fR option to the \fBrun\fR operation for a test suite can be used to set these phases\&. Note that HDL workers must be built before generating/building tests for them\&.
.sp
A component unit test suite is described by an OpenCPI Test Suite Description (OTSD), which is an XML file that specifies the test cases and the defaults that apply to all test cases\&.
.sp
In a project, a component unit test suite resides in its own directory named \fI<component\-name>\fR\fB\&.test\fR within a component library\&. Within the test suite directory are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The test suite\(cqs "make" file (named
\fBMakefile\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
The Test Suite Description file (named
\fI<component\-name>\fR\fB\-test\&.xml\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A generator script to create input data files for ports or property value files (one generator script for each port) (initially named
\fBgenerator\&.py\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A verifier script to verify test output data produced by the output ports (one verifier script for each port) (initially named
\fBverify\&.py\fR)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A viewer script to view the results of test execution; for example, a plot (initially named
\fBview\&.sh\fR)
.RE
.sp
The \fBocpidev create\fR operation produces initial versions of these files that can then be edited as necessary to implement the test suite\&.
.sp
Running the build and generate phases creates two additional subdirectories:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
A
\fBgen/\fR
subdirectory that contains the built test cases and a text file that describes them
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
An
\fBapplications/\fR
subdirectory that contains OpenCPI Application Specification (OAS) files and scripts used by the OpenCPI test framework to execute the test cases
.RE
.sp
Running the prepare and run phases creates an additional \fBrun/\fR subdirectory that contains the results of the test case executions, such as output data from each output port, final values of all properties, including volatile properties, and a log file of the actual test execution\&.
.sp
Running \fBocpidev clean\fR removes the \fBapplication/\fR, \fBgen/\fR and \fBrun\fR\fB/\fR subdirectories\&.
.sp
The chapter "Unit Testing of Workers" in the \fIOpenCPI Component Development Guide\fR provides details on the OpenCPI Test Suite Description XML structure and syntax, test suite phase operations, and the development process for OpenCPI component unit test suites\&.
.sp
Verbs that can operate on a component unit test suite are:
.PP
\fBbuild\fR
.RS 4
Build the component unit test suite, creating directories and files as necessary\&.
.RE
.PP
\fBclean\fR
.RS 4
Remove all the generated and compiled files for the component unit test suite\&.
.RE
.PP
\fBcreate\fR
.RS 4
Create the named component unit test suite, creating files and directories as required\&.
.RE
.PP
\fBdelete\fR
.RS 4
Remove all directories and files associated with the named component unit test suite\&.
.RE
.PP
\fBrun\fR
.RS 4
Run the component unit test suite, creating files and directories as required\&.
.RE
.sp
Note that an asset\(cqs name is implied by the directory you\(cqre in when you issue the \fBocpidev\fR command\&. For a component unit test suite, this means that you can perform operations (verbs) on the unit test without having to specify its name when you issue the \fBocpidev\fR command from inside the the component unit test suite\(cqs directory\&.
.sp
The \fBocpidev\fR tool can also operate on a plural \fBtests\fR noun\&. The syntax is:
.sp
\fBocpidev\fR [\fI<options>\fR] [\fBrun\fR|\fBshow\fR] \fBtests\fR
.sp
The verbs that can be performed on the \fBtests\fR noun are:
.PP
\fBrun\fR
.RS 4
Run all the component unit tests suites in the given library\&. The general\-purpose options and all
\fBrun\fR
options for component unit test suites can be used\&.
.RE
.PP
\fBshow\fR
.RS 4
Display information about component unit test suites in the current scope\&. The general\-purpose options and the
\fBshow\fR
formatting options can be used\&.
.RE
.SH "OPTIONS"
.sp
In the descriptions below, a plus sign (+) after the option indicates that it can be specified more than once on the command line\&.
.sp
Keywords for platforms supported by OpenCPI that can be specified in the \fI<platform>\fR argument to an option can be found in the tables of supported platforms in the \fIOpenCPI User Guide\fR\&.
.sp
Keywords for architectures supported by OpenCPI that can be specified in the \fI<target>\fR argument to an option include \fBisim\fR, \fBmodelsim\fR, \fBstratix4\fR, \fBvirtex6\fR, \fBzynq\fR\&.
.SS "Options That Apply to All Operations (Verbs) on Test Suites"
.PP
\fB\-d\fR \fI<directory>\fR
.RS 4
Specify the directory in which the command should be run\&. Analogous to the
\fB\-C\fR
option in the POSIX
\fBmake\fR
command\&.
.RE
.PP
\fB\-v\fR, \fB\-\-verbose\fR
.RS 4
Describe what is happening in command execution in more detail\&.
.RE
.SS "Options When Creating Unit Test Suites"
.PP
\fB\-\-exclude\-platform=\fR\fI<platform>\fR, \fB\-Q\fR \fI<platform>\fR+
.RS 4
Do not build the component unit test suite for the specified platform\&.
.RE
.PP
\fB\-\-only\-platform=\fR\fI<platform>\fR, \fB\-G\fR \fI<platform>\fR+
.RS 4
Only build the component unit test suite for the specified platform\&.
.RE
.PP
\fB\-S\fR \fI<component\-spec>\fR
.RS 4
Specify the component spec (OCS) that the component unit test suite implements\&. The default is
\fI<name>\fR\fB\-spec\fR
or
\fI<name>\fR\fB_spec\fR
depending on what
\fBocpidev\fR
finds in the
\fBspecs\fR
directory of the library or project (or libraries specified with the
\fB\-y\fR
option or other projects specified by the
\fB\-D\fR
option when the project that contains the component unit test suite was created)\&.
.RE
.PP
\fB\-T\fR \fI<target>\fR+
.RS 4
Only build the component unit test suite for the specified architecture\&.
.RE
.PP
\fB\-k\fR
.RS 4
Keep files and directories created after a component unit test suite creation fails\&. Normally, all such files and directories are removed on any failure\&.
.RE
.SS "Options When Deleting Unit Test Suites"
.PP
\fB\-f\fR
.RS 4
Force deletion: do not ask for confirmation when deleting a component unit test suite\&. Normally, you are asked to confirm a deletion\&.
.RE
.SS "Options When Building Component Unit Test Suites"
.PP
\fB\-\-hdl\-rcc\-platform=\fR\fI<platform>\fR+
.RS 4
Build the component unit test(s) for the RCC platforms associated with the specified HDL platform\&. If this option is not used (and
\fB\-\-rcc\-platform\fR
\fI<platform>\fR
is also not used), the current development software platform is used as the single RCC platform used for building\&.
.RE
.PP
\fB\-\-rcc\-platform=\fR\fI<platform>\fR+
.RS 4
Build the component unit test(s) for the specified RCC platform\&. If this option is not used (and
\fB\-\-hdl\-rcc\-platform\fR
\fI<platform>\fR
is also not used), the current development software platform is used as the single RCC platform used for building\&.
.RE
.SS "Options When Building Component Unit Test Suites with HDL Workers"
.PP
\fB\-\-hdl\-platform=\fR\fI<hdl\-platform>\fR+
.RS 4
Build the component unit test suite(s) for the specified HDL platform\&.
.RE
.PP
\fB\-\-hdl\-target=\fR\fI<target>\fR+
.RS 4
Build the component unit test suite(s) for the specified HDL architecture\&. If only HDL targets are specified (and no HDL platforms), containers for the unit test suite(s) are not built\&.
.RE
.SS "Options When Running Component Unit Tests Suites"
.PP
\fB\-\-accumulate\-errors\fR
.RS 4
Report execution or verification errors as they occur rather than ending the test on the first failure detected\&.
.RE
.PP
\fB\-\-case=\fR\fI<test\-case>\fR+
.RS 4
Specify the test case(s) to be run and verified\&. You can use the wildcard character in
\fI<test\-case>\fR; for example, case*, case0\&.0*\&.
.RE
.PP
\fB\-\-exclude\-platform=\fR\fI<platform>\fR, \fB\-Q\fR \fI<platform>\fR+
.RS 4
Specify the runtime platform to omit from the component unit test suite(s)\&.
.RE
.PP
\fB\-\-hdl\-platform=\fR\fI<platform>\fR+
.RS 4
Specify the HDL platform to use with the component unit test suite(s)\&. This option is only valid in generate and build phases\&.
.RE
.PP
\fB\-\-keep\-simulations\fR
.RS 4
Keep HDL simulation files regardless of verification results\&. By default, simulation files are removed if the verification is successful\&. Warning: Simulation files can become large!
.RE
.PP
\fB\-\-library=\fR\fI<library>\fR, \fB\-l\fR \fI<library>\fR
.RS 4
Run the component unit test suite(s) in the specified library\&.
.RE
.PP
\fB\-\-mode=\fR\fI<mode>\fR[,\fI<mode>\fR[,\fI<mode>\fR\&...]]
.RS 4
Specify which phase(s) of the component unit test suite(s) to execute\&. Valid modes are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBall\fR: execute all five phases (the default if
\fB\-\-mode\fR
is not used)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgen\fR: execute generate phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgen_build\fR: execute generate and build phases\&. This mode is analagous to the
\fBbuild\fR
verb\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep_run_verify\fR: execute prepare, run, and verify phases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep\fR: execute prepare phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBrun\fR: execute run phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep_run\fR: execute prepare and run phases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBverify\fR: execute verify phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBview\fR: execute the view script (view\&.sh) on an already executed run
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBclean_all\fR: clean all generated files\&. This mode is analogous to the
\fBclean\fR
verb\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBclean_run\fR: clean all files generated during the run phase
.RE
.RE
.PP
\fB\-\-only\-platform=\fR\fI<platform>\fR, \fB\-G\fR \fI<platform>\fR+
.RS 4
Specify the runtime platform to use with the component unit test suite(s)\&.
.RE
.PP
\fB\-\-rcc\-platform=\fR\fI<platform>\fR+
.RS 4
Specify the RCC platform to use to build and generate the component unit test suite(s)\&.
.RE
.PP
\fB\-\-remotes=\fR\fI<system>\fR
.RS 4
Specify the remote system to run the component unit test suite(s) by setting the
\fBOCPI_REMOTE_TEST_SYS\fR
variable\&. See the section "Defining Remote Systems for Executing Tests" in the
\fIOpenCPI Component Development Guide\fR
for more information\&.
.RE
.PP
\fB\-\-view\fR
.RS 4
Run the view script (\fBview\&.sh\fR) at the conclusion of the test suite\(cqs execution\&.
.RE
.SS "Options When Showing Component Unit Test Suites (plural noun only)"
.PP
\fB\-\-json\fR
.RS 4
Format the output in Javascript Object Notation (JSON) format for integration with other software\&.
.RE
.PP
\fB\-\-local\-scope\fR
.RS 4
Only display information about the component unit tests in the local library\&.
.RE
.PP
\fB\-\-simple\fR
.RS 4
Format the output as simply as possible\&.
.RE
.PP
\fB\-\-table\fR
.RS 4
Display the output in an easy\-to\-read table\&. This is the default display format used if
\fB\-\-simple\fR
or
\fB\-\-json\fR
are not used\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
From the project\(cqs
\fBcomponents\fR
library, create a component unit test suite for the
\fBmycomp\fR
component:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev create test mycomp
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Inside the
\fBcomponents\fR
library, create a test suite for the
\fBmycomp\fR
component that only runs on the
\fBcentos7\fR
platform:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev create test mycomp \-\-only\-platform=centos7
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Inside the
\fBcomponents\fR
library, create a test suite for the
\fBmycomp\fR
component that only runs on platforms that implement the
\fBzynq\fR
architecture:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev create test mycomp \-T zynq
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Inside the
\fBmycomp\&.test\fR
directory, build the component unit test suite for the
\fBzed\fR
HDL platform and
\fBxilinx13_3\fR
RCC platform\&.
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev build test \-\-hdl\-platform zed \-\-rcc\-platform xilinx13_3
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Inside the
\fBmycomp\&.test\fR
directory, clean the directory:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev clean test
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
Inside the
\fBcomponents\fR
library in the current project, run the prepare, run and verify phases of the unit test suite for the
\fBmycomp\fR
component, accumulating any errors and invoking the viewer shell script (\fBview\&.sh\fR) to view the plotted test results:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run test mycomp\&.test \-\-accumulate_errors
                             \-\-mode=prep_run_verify
                             \-\-view
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
Inside the
\fBassets\fR
project, run the test suite for the timestamper component in the
\fButil_comps\fR
library:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run test timestamper\&.test \-\-library=util_comps
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 8.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  8." 4.2
.\}
Inside the
\fBcomponents\fR
library in the current project, run all the component unit test suites in the library:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run tests
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 9.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  9." 4.2
.\}
Display information about the component unit test suites in the current project:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev show tests \-\-local\-scope
.fi
.if n \{\
.RE
.\}
.RE
.SH "BUGS"
.sp
See https://www\&.opencpi\&.org/report\-defects
.SH "RESOURCES"
.sp
See the main web site: https://www\&.opencpi\&.org
.SH "SEE ALSO"
.sp
ocpidev(1) ocpidev\-application(1) ocpidev\-build(1) ocpidev\-component(1) ocpidev\-create(1) ocpidev\-clean(1) ocpidev\-delete(1) ocpidev\-project(1) ocpidev\-run(1) ocpidev\-show(1) ocpidev\-worker(1)
.SH "COPYING"
.sp
Copyright (C) 2020 OpenCPI www\&.opencpi\&.org\&. OpenCPI is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version\&.
