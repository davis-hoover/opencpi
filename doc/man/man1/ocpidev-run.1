.\"     Title: ocpidev-run
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/28/2020
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "OCPIDEV\-RUN" "1" "05/28/2020" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
ocpidev-run \- runs applications and component unit tests\&.
.SH "SYNOPSIS"
.sp
\fBocpidev\fR \fBrun\fR [\fI<options>\fR] \fI<noun>\fR [\fI<name>\fR]
.SH "DESCRIPTION"
.sp
The \fBrun\fR verb invokes the OpenCPI tool for running component unit tests and applications\&. Applications that are simply an application XML are not yet implemented using \fBocpidev\fR\&.
.sp
Component unit tests have five phases:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Generate: generate testing artifacts after finding the component spec and the workers\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Build: build HDL bitstream/executable artifacts for testing\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Prepare: examine available built workers and available platforms, creating execution scripts to use them all for executing feasible tests\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Run: execute tests for all workers, configurations, test cases and platforms\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Verify: verify results from the execution of tests on workers and platforms\&.
.RE
.sp
One or more "modes" based on these phases can be specified with the \fB\-\-mode\fR option to the \fBrun\fR verb\&.
.sp
There are two types of options for setting platforms\&. The first type (\fB\-\-rcc\-platform\fR and \fB\-\-hdl\-platform\fR) cause the tool to build (run generate and build phases) for the specified platforms\&. The second type (\fB\-\-only\-platform\fR, \fB\-\-exclude\-platform\fR) are used to limit the runtime available platform (prepare, run, and verify phases) where the command is executed\&.
.sp
Asset types to be specified in the \fI<noun>\fR argument are:
.PP
\fBapplication\fR
.RS 4
Run the specified application\&.
.RE
.PP
\fBapplications\fR
.RS 4
Run all the applications in a project\&.
.RE
.PP
\fBlibrary\fR
.RS 4
Run all the unit tests in the specified component library\&.
.RE
.PP
\fBproject\fR
.RS 4
Run all applications and component unit tests in the specified project\&.
.RE
.PP
\fBtest\fR
.RS 4
Run the specified component unit test\&.
.RE
.PP
\fBtests\fR
.RS 4
Run all the component unit tests in a project or library\&.
.RE
.SH "OPTIONS"
.sp
In the option descriptions below, a plus sign (+) indicates that the option can be specified more than once on the command line\&.
.SS "Options That Apply to Applications and Unit Tests"
.PP
\fB\-\-rcc\-platform=\fR\fI<platform>\fR+
.RS 4
Specify the RCC platform to use to build and generate the unit tests and build the ACI applications\&.
.RE
.SS "Options That Apply to Applications Only"
.PP
\fB\-\-before\fR \fI<args>\fR+
.RS 4
Specify the argument(s) to insert before the ACI executable or the
\fBocpirun\fR
command; for example, environment settings or prefix commands\&.
.RE
.PP
\fB\-\-after\fR \fI<args>\fR+
.RS 4
Specify the argument(s) to insert at the end of the execution command line\&.
.RE
.PP
\fB\-\-run\-arg\fR \fI<args>\fR+
.RS 4
Specify the argument(s) to insert immediately after the ACI executable or the
\fBocpirun\fR
command\&.
.RE
.sp
For details on how to use these options, see the section "Applications in Projects" in the \fIOpenCPI Application Development Guide\fR\&.
.SS "Options That Apply to Unit Tests Only"
.PP
\fB\-l\fR \fI<library>\fR
.RS 4
Run the unit test in the specified library\&.
.RE
.PP
\fB\-\-case=\fR\fI<case\-name>\fR[\fB,\fR\fI<case\-name>\fR[\fB,\fR\fI<case\-name>\fR\&...]]
.RS 4
Specify the test case(s) to be run/verified\&. If this option is not used, the default case run/verified is
\fBcase00\fR\&. You can specify wildcards in
\fI<case\-name>\fR\&. To specify a subcase, use the notation
\fI<case\-name>\fR\fB\&.\fR\fI<subcase\-number>\fR\&. Examples: case*\&., case0\&.0*, case00\&.01
.RE
.PP
\fB\-\-accumulate\-errors\fR
.RS 4
Report execution or verification errors as they occur rather than ending the test on the first failure detected\&.
.RE
.PP
\fB\-\-exclude\-platform=\fR\fI<platform>\fR, \fB\-Q\fR \fI<platform>\fR+
.RS 4
Specify the runtime platform to omit from a unit test\&.
.RE
.PP
\fB\-\-hdl\-platform=\fR\fI<platform>\fR+
.RS 4
Specify the HDL platform to use with the unit test\&. This option is only valid in generate and build phases\&.
.RE
.PP
\fB\-\-keep\-simulations\fR
.RS 4
Keep HDL simulation files regardless of verification results\&. By default, simulation files are removed if the verification is successful\&. Warning: Simulation files can become large!
.RE
.PP
\fB\-\-mode=\fR\fI<mode>\fR[,\fI<mode>\fR[,\fI<mode>\fR\&...]]
.RS 4
Specify which phase(s) of the unit test to execute\&. Valid modes are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBall\fR: execute all five phases (the default if the
\fB\-\-mode\fR
option is not used)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgen\fR: execute generate phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBgen_build\fR: execute generate and build phases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep_run_verify\fR: execute prepare, run, and verify phases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep\fR: execute prepare phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBrun\fR: execute run phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBprep_run\fR: execute prepare and run phases
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBverify\fR: execute verify phase
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBview\fR: execute the view script (view\&.sh) on an already executed run
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBclean_all\fR: clean all generated files
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
\fBclean_run\fR: clean all files generated during the run phase
.RE
.RE
.PP
\fB\-\-only\-platform=\fR\fI<platform>\fR, \fB\-G\fR \fI<platform>\fR+
.RS 4
Specify the runtime platform to use with a unit test\&.
.RE
.PP
\fB\-\-remotes=\fR\fI<system>\fR
.RS 4
Specify the remote system to run the test(s) by setting the
\fBOCPI_REMOTE_TEST_SYS\fR
variable\&. See the section "Defining Remote Systems for Executing Tests" in the
\fIOpenCPI Component Development Guide\fR
for more information\&.
.RE
.PP
\fB\-\-view\fR
.RS 4
Run the view script (view\&.sh) for the test at the conclusion of the test\(cqs execution\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Run an application named
\fBmyapp\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run application myapp
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Run all the applications in the current project:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run applications
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Inside the
\fBassets\fR
project, run the
\fBfir_real_see\fR
unit test in the
\fBdsp_comps\fR
library located at
\fBcomponents/dsp_comps\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run \-l dsp_comps test fir_real_sse
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
Inside the
\fBassets\fR
project, run all tests in the
\fBdsp_comps\fR
library located at
\fBcomponents/dsp_comps\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run library dsp_comps
.fi
.if n \{\
.RE
.\}
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
Inside the
\fBassets\fR
project, run the generate and build stages of the
\fBfir_real_sse\fR
test in the
\fBdsp_comps\fR
library located at
\fBcomponents/dsp_comps\fR:
.sp
.if n \{\
.RS 4
.\}
.nf
ocpidev run \-l dsp_comps \-\-mode=gen_build test fir_real_sse
.fi
.if n \{\
.RE
.\}
.RE
.SH "BUGS"
.sp
See https://www\&.opencpi\&.org/report\-defects
.SH "RESOURCES"
.sp
See the main web site: https://www\&.opencpi\&.org
.SH "SEE ALSO"
.sp
ocpidev(1) ocpidev\-build(1) ocpidev\-clean(1) ocpidev\-create(1) ocpidev\-delete(1) ocpidev\-refresh(1) ocpidev\-register(1) ocpidev\-set(1) ocpidev\-show(1) ocpidev\-unregister(1) ocpidev\-unset(1) ocpidev\-utilization(1)
.SH "COPYING"
.sp
Copyright (C) 2020 OpenCPI www\&.opencpi\&.org\&. OpenCPI is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version\&.
