/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file
 * distributed with this source distribution.
 *
 * This file is part of OpenCPI <http://www.opencpi.org>
 *
 * OpenCPI is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// FIXME: there is still way to much redudancy and clutter in here...
// NOTE: the "hi32" is really the "second32"
#define ENTITY_HEADER(pretty,comment) \
$-- END:\
$-- FILE: pretty##_property\
$--\
$-- comment \
$--\
$library ieee; use ieee.std_logic_1164.all; use ieee.numeric_std.all;\
$library ocpi; use ocpi.all, ocpi.types.all, ocpi.wci.all, ocpi.ocp.all, ocpi.util.all;\
$entity pretty##_property is\

#define ENTITY(pretty,which,def,rng) \
ENTITY_HEADER(pretty,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_t := def); \
$@@port (clk          : in std_logic; \
$@@@@@@@@reset        : in bool_t; \
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t; \
$@@@@@@@@data         : in std_logic_vector(rng); \
$@@@@@@@@value        : out pretty##_t; \
$@@@@@@@@written      : out bool_t \
$@@@@@@@);\
$end entity;

// Write-only implementation
#define WPROP(pretty,which,def,rng,lhs,rhs) \
ENTITY(pretty,which,def,rng) \
$architecture rtl of pretty##_property is begin\
$@@reg: process(Clk) is\
$@@begin \
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@ value <= default;\
$@@@@@@@ written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@value <= rhs(data);\
$@@@@@@@@written <= btrue;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define RPROP(pretty,which,def,rng,lhs,rhs)\
ENTITY_HEADER(pretty##_read,readback scalar <=32 property)\
$@@generic (worker : worker_t; property : property_t);\
$@@port (value       : in pretty##_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@data_out    : out std_logic_vector(31 downto 0));\
$end entity; \
$architecture rtl of pretty##_read_property is begin\
$@@data_out <= std_logic_vector(shift_left(resize(unsigned(lhs(value)),32),\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@to_integer(property.offset rem 4)*8));\
$end rtl;

#define ENTITY_64(pretty,which,def,rng) \
ENTITY_HEADER(pretty,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_t := def); \
$@@port (clk          : in std_logic; \
$@@@@@@@@reset        : in bool_t; \
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t; \
$@@@@@@@@data         : in std_logic_vector(31 downto 0); \
$@@@@@@@@value        : out pretty##_t; \
$@@@@@@@@written      : out bool_t; \
$@@@@@@@@hi32         : in bool_t); \
$end entity;

// Write-only implementation
#define WPROP_64(pretty,which,def,rng,lhs,rhs) \
ENTITY_64(pretty,which,def,rng) \
$architecture rtl of pretty##_property is begin\
$@@reg: process(Clk) is\
$@@begin \
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@ value <= default;\
$@@@@@@@ written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@if its(hi32) then\
$@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@value(31 downto 0) <= rhs(data);\
$@@@@@@@@@@else\
$@@@@@@@@@@@@value(63 downto 32) <= rhs(data);\
$@@@@@@@@@@end if;\
$@@@@@@@@@@written <= btrue;\
$@@@@@@@@else\
$@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@value(63 downto 32) <= rhs(data);\
$@@@@@@@@@@else\
$@@@@@@@@@@@@value(31 downto 0) <= rhs(data);\
$@@@@@@@@@@end if;\
$@@@@@@@@end if; \
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define RPROP_64(pretty,which,def,rng,lhs,rhs)\
ENTITY_HEADER(pretty##_read,readback scalar  >32 property)\
$@@generic (worker : worker_t; property : property_t);\
$@@port (value       : in pretty##_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@hi32        : in bool_t;\
$@@@@@@@@data_out    : out std_logic_vector(31 downto 0)\
$@@@@@@@);\
$end entity;\
$architecture rtl of pretty##_read_property is begin\
$@@data_out <= std_logic_vector(value(63 downto 32)) when hi32 /= is_big_endian\
$@@@@@@@@@@@@@ else std_logic_vector(value(31 downto 0));\
$end rtl;

#define ENTITY_STRING(pretty,which,def,rng) \
ENTITY_HEADER(pretty,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_t := def); \
$@@port (clk          : in std_logic;\
$@@@@@@@@reset        : in bool_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t;\
$@@@@@@@@data         : in std_logic_vector(rng);\
$@@@@@@@@value        : out pretty##_t(0 to property.string_length);\
$@@@@@@@@written      : out bool_t;\
$@@@@@@@@offset       : in unsigned(width_for_max(property.bytes_1)-1 downto 0));\
$end entity;

#define WPROP_STRING(pretty,which,def,rng,lhs,rhs) \
ENTITY_STRING(pretty,which,def,rng) \
$architecture rtl of pretty##_property is \
$@@signal temp : string_t(0 to property.string_length + 3);\
$begin\
$@@value <= temp(0 to property.string_length);\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@ temp <= (others => to_signed(0,char_t~length));\
$@@@@@@@ written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@for i in 0 to 3 loop\
$@@@@@@@@@@temp(to_integer(offset)+i) <= to_string_dw(data)(i);\
$@@@@@@@@end loop;\
$@@@@@@@@written <= btrue;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define RPROP_STRING(pretty,which,def,rng,lhs,rhs)\
ENTITY_HEADER(pretty##_read,readback string property)\
$@@generic (worker : worker_t; property : property_t);\
$@@port (value       : in pretty##_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@data_out    : out std_logic_vector(31 downto 0);\
$@@@@@@@@offset      : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@read_enable : in bool_t);\
$end entity;\
$architecture rtl of pretty##_read_property is begin\
$@@data_out <= from_string(value, offset, is_big_endian) when its(read_enable)\
$@@@@@@@@@@@@@@else (others => '0');\
$end rtl;

#define ENTITY_ARRAY(pretty,which,def,rng) \
ENTITY_HEADER(pretty##_array,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_array_t); \
$@@port (clk          : in std_logic;\
$@@@@@@@@reset        : in bool_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t;\
$@@@@@@@@data         : in std_logic_vector(31 downto 0);\
$@@@@@@@@value        : out pretty##_array_t(0 to property.nitems-1);\
$@@@@@@@@written      : out bool_t;\
$@@@@@@@@offset       : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@any_written  : out bool_t;\
$@@@@@@@@nbytes_1     : in byte_offset_t);\
$end entity;

#define ENTITY_ARRAY_64(pretty,which,def,rng) \
ENTITY_HEADER(pretty##_array,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_array_t); \
$@@port (clk          : in std_logic;\
$@@@@@@@@reset        : in bool_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t;\
$@@@@@@@@data         : in std_logic_vector(31 downto 0);\
$@@@@@@@@value        : out pretty##_array_t(0 to property.nitems-1);\
$@@@@@@@@written      : out bool_t;\
$@@@@@@@@offset       : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@any_written  : out bool_t;\
$@@@@@@@@hi32         : in bool_t);\
$end entity;

// boolean version with one bit per byte
#define WPROP_ARRAY_1(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY(pretty,which,def,rng) \
$architecture rtl of pretty##_array_property is \
$@@signal base : natural;\
$begin\
$@@base <= to_integer(offset);\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@@value <= default;\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@value(base) <= rhs(data(24));\
$@@@@@@@@@@if nbytes_1 > 0 and property.nitems > 1 then\
$@@@@@@@@@@@@value(base+1) <= rhs(data(16));\
$@@@@@@@@@@@@if nbytes_1 > 1 and property.nitems > 2 then\
$@@@@@@@@@@@@@@value(base+2) <= rhs(data(8));\
$@@@@@@@@@@@@@@if nbytes_1 > 2 and property.nitems > 3 then\
$@@@@@@@@@@@@@@@@value(base+3) <= rhs(data(0));\
$@@@@@@@@@@@@@@end if;\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@else\
$@@@@@@@@@@value(base) <= rhs(data(0));\
$@@@@@@@@@@if nbytes_1 > 0 and property.nitems > 1 then\
$@@@@@@@@@@@@value(base+1) <= rhs(data(8));\
$@@@@@@@@@@@@if nbytes_1 > 1 and property.nitems > 2 then\
$@@@@@@@@@@@@@@value(base+2) <= rhs(data(16));\
$@@@@@@@@@@@@@@if nbytes_1 > 2 and property.nitems > 3 then\
$@@@@@@@@@@@@@@@@value(base+3) <= rhs(data(24));\
$@@@@@@@@@@@@@@end if;\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@end if;\
$@@@@@@@@any_written <= btrue;\
$@@@@@@@@if base = 0 then written <= btrue; end if;\
$@@@@@@else\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@@@written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define ENTITY_RPROP_ARRAY(pretty,comment) \
ENTITY_HEADER(pretty##_read_array,comment)\
$@@generic (worker : worker_t; property : property_t); \
$@@port (value         : in pretty##_array_t(0 to property.nitems-1); \
$@@@@@@@@is_big_endian : in bool_t;\
$@@@@@@@@data_out      : out std_logic_vector(31 downto 0);\
$@@@@@@@@offset        : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@nbytes_1      : in byte_offset_t);\
$end entity;

#define RPROP_ARRAY_1(pretty,which,def,rng,lhs,rhs) \
ENTITY_RPROP_ARRAY(pretty,readback 1 bit property array)\
$architecture rtl of pretty##_read_array_property is \
$@@signal byte_offset : byte_offset_t; \
$begin\
$@@byte_offset <= resize(property.offset + offset, byte_offset_t~length);\
$@@data_out <= from_bool_array(value,offset,nbytes_1,byte_offset,its(is_big_endian));\
$end rtl;

#define RPROP_ARRAY_8(pretty,which,def,rng,lhs,rhs) \
ENTITY_RPROP_ARRAY(pretty,readback scalar 8 bit property)\
$architecture rtl of pretty##_read_array_property is\
$@@signal i : natural;\
$@@signal word : dword_t;\
$@@impure function val(i : natural) return pretty##_t is\
$@@begin\
$@@@@if i < property.nitems then\
$@@@@@@return value(i);\
$@@@@end if;\
$@@@@return (others => '0');\
$@@end;\
$begin\
$@@i <= to_integer(offset) when offset < property.nitems else 0;\
$@@word <=\
$@@@@x"000000" & std_logic_vector(val(i)) when nbytes_1 = 0 and not its(is_big_endian) else\
$@@@@std_logic_vector(val(i)) & x"000000" when nbytes_1 = 0 and its(is_big_endian) else\
$@@@@x"0000" & std_logic_vector(val(i+1)) & std_logic_vector(val(i))\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@when nbytes_1 = 1 and not its(is_big_endian) else\
$@@@@std_logic_vector(val(i)) & std_logic_vector(val(i+1)) & x"0000"\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@when nbytes_1 = 1 and its(is_big_endian) else\
$@@@@x"00" & std_logic_vector(val(i+2)) &\
$@@@@std_logic_vector(val(i+1)) & std_logic_vector(val(i))\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@when nbytes_1 = 2 and not its(is_big_endian) else\
$@@@@std_logic_vector(val(i)) &\
$@@@@std_logic_vector(val(i+1)) & std_logic_vector(val(i+2)) & x"00" \
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@when nbytes_1 = 2 and its(is_big_endian) else\
$@@@@std_logic_vector(val(i+3)) & std_logic_vector(val(i+2)) &\
$@@@@std_logic_vector(val(i+1)) & std_logic_vector(val(i))\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@when nbytes_1 = 3 and not its(is_big_endian) else\
$@@@@std_logic_vector(val(i)) & std_logic_vector(val(i+1)) &\
$@@@@std_logic_vector(val(i+2)) & std_logic_vector(val(i+3));\
$@@data_out <= dword_t(shift_left(unsigned(word),\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@to_integer((property.offset+to_integer(offset)) rem 4) *8))\
$@@@@@@@@@@@@@@@@when not is_big_endian else\
$@@@@@@@@@@@@@@dword_t(shift_right(unsigned(word),\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@to_integer((property.offset+to_integer(offset)) rem 4) *8));\
$end rtl;

#define RPROP_ARRAY_16(pretty,which,def,rng,lhs,rhs) \
ENTITY_RPROP_ARRAY(pretty,readback scalar 16 bit property)\
$architecture rtl of pretty##_read_array_property is\
$@@signal index, i, i_plus_1 : unsigned(util.max(1, offset~left)-1 downto 0);\
$@@signal odd : boolean;\
$@@signal bits : std_logic_vector(3 downto 0);\
$begin\
$@@g0: if offset~left = 0 generate\
$@@@@data_out(15 downto 0) <= std_logic_vector(value(0));\
$@@@@data_out(31 downto 16) <= (others => '0');\
$@@end generate;\
$@@g1: if offset~left > 0 generate\
$@@@@index@@@ <= resize(offset, index~length) srl 1;\
$@@@@i@@@@@@@ <= index when index < property.nitems else (others => '0');\
$@@@@i_plus_1 <= i + 1 when nbytes_1(1) and i < (property.nitems - 1) else i;\
$@@@@odd <= (i + property.offset/2) rem 2 = 1;\
$@@@@bits <= util.slv(nbytes_1(1)) & util.slv(offset(1)) &\
$@@@@@@@@@@@ util.slv(property.offset(1)) & util.slv(is_big_endian);\
$@@@@with bits select\
$@@@@@@data_out(31 downto 16) <=\
$@@@@@@@@std_logic_vector(value(to_integer(i)))@@ when x"1"|x"2"|x"4"|x"7"|x"9"|x"f",\
$@@@@@@@@std_logic_vector(value(to_integer(i_plus_1))) when others;\
$@@@@with bits select\
$@@@@@@data_out(15 downto 0) <=\
$@@@@@@@@std_logic_vector(value(to_integer(i)))@@ when x"0"|x"3"|x"5"|x"6"|x"8"|x"e",\
$@@@@@@@@std_logic_vector(value(to_integer(i_plus_1))) when others;\
$@@end generate;\
$end rtl;

#define RPROP_ARRAY_32(pretty,which,def,rng,lhs,rhs) \
ENTITY_RPROP_ARRAY(pretty,readback scalar 32 bit property)\
$architecture rtl of pretty##_read_array_property is\
$@@signal index, i : unsigned(offset~left-2 downto 0);\
$begin\
$@@index@@@ <= offset(offset~left downto 2);\
$@@i@@@@@@@ <= index when index < property.nitems else (others => '0');\
$@@data_out <= std_logic_vector(value(to_integer(i)));\
$end rtl;

#define RPROP_ARRAY_64(pretty,which,def,rng,lhs,rhs) \
ENTITY_HEADER(pretty##_read_array,readback scalar 64 bit property)\
$@@generic (worker : worker_t; property : property_t);\
$@@port (value       : in pretty##_array_t(0 to property.nitems-1);\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@data_out    : out std_logic_vector(31 downto 0);\
$@@@@@@@@offset      : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@hi32        : in bool_t);\
$end entity;\
$architecture rtl of pretty##_read_array_property is\
$@@signal index, i : unsigned(offset~left-3 downto 0);\
$begin\
$@@index@@@ <= offset(offset~left downto 3);\
$@@i@@@@@@@ <= index when index < property.nitems else (others => '0');\
$@@data_out <= std_logic_vector(value(to_integer(i))(63 downto 32)) when hi32 /= is_big_endian else\
$@@@@@@@@@@@@@@std_logic_vector(value(to_integer(i))(31 downto 0));\
$end rtl;

#define RPROP_ARRAY_STRING(pretty,which,def,rng,lhs,rhs) \
ENTITY_HEADER(pretty##_read_array,readback scalar string property)\
$@@generic (worker : worker_t; property : property_t);\
$@@port@@@ (value@@@@@@ : in@ pretty##_array_t(0 to property.nitems-1,\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@0 to (property.string_length+4)/4*4-1);\
$@@@@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@@@@data_out@@@ : out std_logic_vector(31 downto 0);\
$@@@@@@@@@@@offset@@@@@ : in@ unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@@@@read_enable : in@ bool_t);\
$end entity;


#define WPROP_ARRAY_8(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY(pretty,which,def,rng) \
$architecture rtl of pretty##_array_property is\
$@@signal base : natural range 0 to 2**offset~length-1;\
$@@signal byte : unsigned(1 downto 0);\
$@@signal lowbit : natural range 0 to 31;\
$begin\
$@@base <= to_integer(offset);\
$@@byte <= to_unsigned(base, 2) + property.offset(1 downto 0);\
$@@lowbit <= to_integer(byte(1 downto 0)) * 8 when not is_big_endian else\
$@@@@@@@@@@@@(3 - to_integer(byte(1 downto 0))) * 8;\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@@value <= default;\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@value(base) <= rhs(data(lowbit+7 downto lowbit));\
$@@@@@@@@@@if nbytes_1 > 0 and property.nitems > 1 then\
$@@@@@@@@@@@@value(base+1) <= rhs(data(lowbit-1 downto lowbit-8));\
$@@@@@@@@@@@@if nbytes_1 > 1 and property.nitems > 2 then\
$@@@@@@@@@@@@@@value(base+2) <= rhs(data(15 downto 8));\
$@@@@@@@@@@@@@@value(base+3) <= rhs(data(7 downto 0));\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@else\
$@@@@@@@@@@value(base) <= rhs(data(lowbit+7 downto lowbit));\
$@@@@@@@@@@if nbytes_1 > 0 and property.nitems > 1 then\
$@@@@@@@@@@@@value(base+1) <= rhs(data(lowbit+15 downto lowbit+8));\
$@@@@@@@@@@@@if nbytes_1 > 1 and property.nitems > 2 then\
$@@@@@@@@@@@@@@value(base+2) <= rhs(data(23 downto 16));\
$@@@@@@@@@@@@@@value(base+3) <= rhs(data(31 downto 24));\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@end if;\
$@@@@@@@@any_written <= btrue;\
$@@@@@@@@if base = 0 then written <= btrue; end if;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define WPROP_ARRAY_16(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY(pretty,which,def,rng) \
$architecture rtl of pretty##_array_property is\
$@@signal base : natural;\
$begin\
$@@g0: if property.nitems = 1 generate\
$@@@@reg: process(Clk) is\
$@@@@begin\
$@@@@@@if rising_edge(clk) then\
$@@@@@@@@if its(reset) then\
$@@@@@@@@@@value <= default;\
$@@@@@@@@@@written <= bfalse;\
$@@@@@@@@@@any_written <= bfalse;\
$@@@@@@@@elsif its(write_enable) then\
$@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@value(base) <= rhs(data(31 downto 16));\
$@@@@@@@@@@else\
$@@@@@@@@@@@@value(base) <= rhs(data(15 downto 0));\
$@@@@@@@@@@end if;\
$@@@@@@@@@@any_written <= btrue;\
$@@@@@@@@@@written <= btrue;\
$@@@@@@@@else\
$@@@@@@@@@@written <= bfalse;\
$@@@@@@@@@@any_written <= bfalse;\
$@@@@@@@@end if;\
$@@@@@@end if;\
$@@@@end process;\
$@@end generate;\
$@@g1: if property.nitems /= 1 generate\
$@@@@base <= to_integer(offset(offset~left downto 1));\
$@@@@reg: process(Clk) is\
$@@@@begin\
$@@@@@@if rising_edge(clk) then\
$@@@@@@@@if its(reset) then\
$@@@@@@@@@@value <= default;\
$@@@@@@@@@@written <= bfalse;\
$@@@@@@@@@@any_written <= bfalse;\
$@@@@@@@@elsif its(write_enable) then\
$@@@@@@@@@@if offset(1) = property.offset(1) then -- aligned\
$@@@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@@@value(base) <= rhs(data(31 downto 16));\
$@@@@@@@@@@@@else\
$@@@@@@@@@@@@@@value(base) <= rhs(data(15 downto 0));\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@else\
$@@@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@@@value(base) <= rhs(data(15 downto 0));\
$@@@@@@@@@@@@else\
$@@@@@@@@@@@@@@value(base) <= rhs(data(31 downto 16));\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@@@if nbytes_1 > 1 and property.nitems > 1 then\
$@@@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@@@value(base+1) <= rhs(data(15 downto 0));\
$@@@@@@@@@@@@else\
$@@@@@@@@@@@@@@value(base+1) <= rhs(data(31 downto 16));\
$@@@@@@@@@@@@end if;\
$@@@@@@@@@@end if;\
$@@@@@@@@@@any_written <= btrue;\
$@@@@@@@@@@if base = 0 then written <= btrue; end if;\
$@@@@@@@@else\
$@@@@@@@@@@written <= bfalse;\
$@@@@@@@@@@any_written <= bfalse;\
$@@@@@@@@end if;\
$@@@@@@end if;\
$@@@@end process;\
$@@end generate;\
$end rtl;

#define WPROP_ARRAY_32(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY(pretty,which,def,rng) \
$architecture rtl of pretty##_array_property is\
$@@signal base : natural;\
$begin\
$@@base <= to_integer(offset(offset~left downto 2));\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@@value <= default;\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@value(base) <= rhs(data);\
$@@@@@@@@any_written <= btrue;\
$@@@@@@@@if base = 0 then written <= btrue; end if;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define WPROP_ARRAY_64(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY_64(pretty,which,def,rng) \
$architecture rtl of pretty##_array_property is\
$@@signal base : natural;\
begin\
$@@base <= to_integer(offset(offset~left downto 3));\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@@value <= default;\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@if its(hi32) then -- second dword\
$@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@value(base)(31 downto 0) <= rhs(data);\
$@@@@@@@@@@else\
$@@@@@@@@@@@@value(base)(63 downto 32) <= rhs(data);\
$@@@@@@@@@@end if;\
$@@@@@@@@@@-- for little endian machines that do a store64\
$@@@@@@@@@@if base = 0 then written <= btrue; end if;\
$@@@@@@@@else\
$@@@@@@@@@@if its(is_big_endian) then\
$@@@@@@@@@@@@value(base)(63 downto 32) <= rhs(data);\
$@@@@@@@@@@else\
$@@@@@@@@@@@@value(base)(31 downto 0) <= rhs(data);\
$@@@@@@@@@@end if;\
$@@@@@@@@end if;\
$@@@@@@@@any_written <= btrue;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process; \
$end rtl;

#define ENTITY_ARRAY_STRING(pretty,which,def,rng) \
ENTITY_HEADER(pretty##_array,implementation of registered pretty property value - with write pulse)\
$@@generic(worker : worker_t; property : property_t; default : pretty##_array_t); \
$@@port (clk          : in std_logic;\
$@@@@@@@@reset        : in bool_t;\
$@@@@@@@@is_big_endian: in bool_t;\
$@@@@@@@@write_enable : in bool_t;\
$@@@@@@@@data         : in std_logic_vector(31 downto 0);\
$@@@@@@@@value        : out pretty##_array_t(0 to property.nitems-1,\
$@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 0 to (property.string_length+4)/4*4-1);\
$@@@@@@@@written      : out bool_t;\
$@@@@@@@@offset       : in unsigned(width_for_max(property.bytes_1)-1 downto 0);\
$@@@@@@@@any_written  : out bool_t);\
$end entity;

#define WPROP_ARRAY_STRING(pretty,which,def,rng,lhs,rhs) \
ENTITY_ARRAY_STRING(pretty,which,def,rng)\
$architecture rtl of string_array_property is\
$@@constant nwords : natural := (property.string_length+4)/4;\
$@@subtype string_words_t is data_a_t(0 to nwords * property.nitems-1);\
$@@signal string_words : string_words_t;\
$@@signal default_words : string_words_t;\
$begin\
$@@gen: for i in 0 to property.nitems-1 generate -- properties~left to 0 generate\
$@@@@gen1:@@for j in 0 to nwords-1 generate\
$@@@@@@gen2:@@for k in 0 to 3 generate\
$@@@@@@@value(i,j*4+k) <=\
$@@@@@@@@@signed(string_words(i*nwords + j)((3-k)*8+7 downto (3-k)*8))\
$@@@@@@@@@when its(is_big_endian) else\
$@@@@@@@@@signed(string_words(i*nwords + j)(k*8+7 downto k*8));\
$@@@@@@@default_words(i*nwords + j)(k*8+7 downto k*8) <=\
$@@@@@@@@@slv(default(i,j*4+3-k))\
$@@@@@@@@@when its(is_big_endian) else\
$@@@@@@@@@slv(default(i,j*4+k));\
$@@@@@@end generate gen2;\
$@@@@end generate gen1;\
$@@end generate gen;\
$@@reg: process(Clk) is\
$@@begin\
$@@@@if rising_edge(clk) then\
$@@@@@@if its(reset) then\
$@@@@@@@@string_words <= default_words; --(0) <= (others => '0');\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@elsif its(write_enable) then\
$@@@@@@@@string_words(to_integer(offset) / 4) <= data;\
$@@@@@@@@written <= btrue;\
$@@@@@@if to_integer(offset) = 0 then\
$@@@@@@@@any_written <= btrue;\
$@@@@@@end if;\
$@@@@@@else\
$@@@@@@@@written <= bfalse;\
$@@@@@@@@any_written <= bfalse;\
$@@@@@@end if;\
$@@@@end if; \
$@@end process;\
$end rtl;

#define TYPE(type,def,rng,suff,asuff,lhs,rhs,an) \
  WPROP##suff(type,X,def,rng,lhs,rhs) \
  WPROP##_ARRAY_##an(type,X,def,rng,lhs,rhs)\
  RPROP##suff(type,X,def,rng,lhs,rhs) \
  RPROP##_ARRAY_##an(type,X,def,rng,lhs,rhs)\

#define TYPEV(type,an) TYPE(type,(others => '0'),type##_t~range,,,,type##_t,an)
#define TYPEV64(type,s) TYPE(type,(others => '0'),type##_t~range,_64,,,s,64)

TYPE(bool,bfalse,0 downto 0,,,from_bool,to_bool,1)
TYPEV(char,8)
TYPEV64(double,)
TYPEV(float,32)
TYPEV(short,16)
TYPEV(long,32)
TYPEV(uchar,8)
TYPEV(ulong,32)
TYPEV(ushort,16)
TYPEV64(longlong,signed)
TYPEV64(ulonglong,unsigned)
TYPE(string,("00000000","00000000"),31 downto 0,_STRING,_STRING,,,STRING)


architecture rtl of string_read_array_property is
  constant nwords : natural := (property.string_length+4)/4;
  subtype string_words_t is data_a_t(0 to nwords * property.nitems-1);
  signal string_words : string_words_t;
begin
  gen: for i in 0 to property.nitems-1 generate -- properties~left to 0 generate
    gen1:  for j in 0 to nwords-1 generate
      gen2:  for k in 0 to 3 generate
        string_words(i*nwords + j)(k*8+7 downto k*8) <=
	   std_logic_vector(value(i,j*4+(3-k))) when its(is_big_endian) else 
	   std_logic_vector(value(i,j*4+k));
      end generate gen2;
    end generate gen1;
 end generate gen;
 data_out <= string_words(to_integer(offset)/4) when its(read_enable) else (others => '0');
end rtl;
