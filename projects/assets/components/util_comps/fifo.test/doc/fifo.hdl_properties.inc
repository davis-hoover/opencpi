%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this file was generated by docGen.py
% editing this file is NOT recommended
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection*{fifo.hdl}
\begin{scriptsize}
\begin{longtable}{|p{\dimexpr0.2\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.05\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.125\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.125\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.1\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.1\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.1\linewidth-2\tabcolsep\relax}
                  |p{\dimexpr0.2\linewidth-2\tabcolsep\relax}|}
\hline
\rowcolor{blue}
Name                 & Type   & SequenceLength & ArrayDimensions & Accessibility       & Valid Range & Default & Description
\\
\hline
FIFO\_DEPTH\_p & Ulong & - & - & Parameter & Standard & 1024 & Maximum number of complex samples which the FIFO can hold at any given time.\\

\hline
ZLM\_WHEN\_ONESHOT\_DONE\_p & Bool & - & - & Parameter & Standard & False & When true, worker will generate Zero-Length-Message after oneshot was enabled and completed.\\

\hline
oneshot & Bool & - & - & Readable, Initial & Standard & False & If false, the FIFO operates normally, i.e. it allows data to flow from adc\_in to adc\_passthrough\_out and transfers backpressure accordingly. If true, the functionality is as follows. The FIFO receives data from adc\_in and holds it until the FIFO is full. One the FIFO is full, data is pulled from the FIFO and sent out the adc\_passthrough\_out port, all the while data is pulled from adc\_in but unused, effectively making the adc\_in port a data sink. Note that a control plane reset will always reset the FIFO and start this operation over.\\

\hline
\end{longtable}
\end{scriptsize}

