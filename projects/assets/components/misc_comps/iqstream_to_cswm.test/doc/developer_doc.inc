%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this file was generated by docGen.py
% this file is intended to be edited
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{center}
\textit{\textbf{Revision History}}
  \begin{table}[H]
  \label{table:revisions} % Add "[H]" to force placement of table
    \begin{longtable}{|p{\dimexpr0.15\textwidth-2\tabcolsep\relax}
                      |p{\dimexpr0.75\textwidth-2\tabcolsep\relax}
                      |p{\dimexpr0.1\textwidth-2\tabcolsep\relax}|}
    \hline
    \rowcolor{blue}
    \textbf{Revision} & \textbf{Description of Change} & \textbf{Date} \\
    \hline
    v1.7 & Initial release & 05/2020 \\
    \hline
    \end{longtable}
  \end{table}
\end{center}
\newpage

\def\name{\comp}
\def\workertype{Application}
\def\version{\ocpiversion}
\def\releasedate{05/2020}
\def\componentlibrary{ocpi.assets.misc\_{}comps}
\def\workers{\comp{}.hdl}
\def\testedplatforms{CentOS7, xsim}
\input{\snippetpath/component_summary_table}

\section*{Block Diagram}
\input{bd.inc}


\section*{Functionality}
\begin{flushleft}
 "It then converts them to ComplexShortWithMetadata protocol messages that are marshaled on to the out port, according to the following table."
\end{flushleft}
\begin{center}
	\begin{tabular}{ |c|c|c| } 
		\hline
		iqstream operation &  ComplexShortWithMetadata operation \\ 
		iq & samples \\ 
		   & time \\
		   & interval \\
		   & flush \\
		   & sync \\
		   & end\_of\_samples \\
		\hline
	\end{tabular}
\end{center}

%\section*{Worker Implementation Details}
%\begin{flushleft}
%\end{flushleft}

%\section*{Theory}
%\begin{flushleft}
%\end{flushleft}

%\section*{Block Diagrams}
%\subsection*{Top level}
%\begin{center}
%\end{center}\pagebreak

%\subsection*{State Machine}
%\begin{flushleft}
%\end{flushleft}

\section*{Source Dependencies}
\subsection*{cswm\_to\_iqstream.hdl}
\begin{itemize}
	\item core/hdl/primitives/protocol/complex\_short\_with\_metadata\_body.vhd 
	\item core/hdl/primitives/protocol/complex\_short\_with\_metadata\_marshaller.vhd
	\item core/hdl/primitives/protocol/complex\_short\_with\_metadata\_pkg.vhd
	\item core/hdl/primitives/protocol/iqstream\_demarshaller.vhd
	\item core/hdl/primitives/protocol/iqstream\_pkg.vhd
	\item core/hdl/primitives/protocol/protocol\_pkg.vhd
\end{itemize}


%\section*{Control Timing and Signals}
%\subsection*{\comp.hdl}
%\begin{flushleft}
%\end{flushleft}

%\section*{Performance and Resource Utilization}
%\subsubsection*{\comp.rcc}
%\subsubsection*{\comp.hdl}

\section*{Test and Verification}
The Unit Under Test (UUT) is tested by a) generating a file containing IQStream protocol-formatted messages which are sent to the UUT via the \verb+file_read+ component, b) using the \verb+file_write+ component to save the file containing the UUT's output as protocol-formatted message, and c) verifying the contents of the output file. The generated file contains one or more \verb+ComplexShortWithMetadata+ \verb+samples+ messages. The sequence of \verb+samples+ messages include samples whose I and Q signals are positive and negative ramp functions, respectively. The output file is verified by confirming that a) the same number of samples exists in the input and output files, and b) the output file contains the same ramp functions as the input.

\section*{Output Width and Bit Growth}
Both the input and output data is marshalled across a 32-bit bus, so bit growth is not a concern.
