// This file is protected by Copyright. Please refer to the COPYRIGHT file
// distributed with this source distribution.

// This file is part of OpenCPI <http://www.opencpi.org>

// OpenCPI is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option) any
// later version.

// OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
// details.

// You should have received a copy of the GNU Lesser General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

library IEEE; use IEEE.std_logic_1164.all; use ieee.numeric_std.all;
library ocpi; use ocpi.types.all, ocpi.util.all; // remove this to avoid all ocpi name collisions
library util; use util.util.all;
library ad936x;
architecture rtl of platform_ad9361_data_sub_worker is
  constant adc_c        : natural := 0;
  constant dac_c        : natural := 1;
  constant config_c     : natural := 2;
  constant lvds_width_c : natural := 6;
  constant port_width_c : natural := 12;

  signal TXNRX_i        : std_logic := '0'; // TODO / FIXME - from upstream somewhere
  signal FB_CLK_P_s     : std_logic := '0';
  signal DATA_CLK_s     : std_logic;
  signal data_clk_buf   : std_logic; // CMOS only
  signal data_clk_n_buf : std_logic := '1'; // LVDS only
begin
  // inform supported workers about our parameters
  dev_cfg_data_port_out.p0_p1_are_swapped  <= swap_ports_p;
  dev_cfg_data_port_out.iostandard_is_lvds <= lvds_p;

  #if !OCPI_PARAM_platform_ad9361_data_sub_LVDS_p()
  //---------------------------------------------------------------------------------
  // Signals common to all CMOS modes (0-6)

    -- forward (and invert) data_clk_buf
    -- (invert is necessary for ad9361_dac_sub.hdl framing alignment)
    dac_clock_forward : util.util.clock_forward
      generic map(
        INVERT_CLOCK => true,
        INCLUDE_BUF  => false)
      port map(
        RST       => '0',
        CLK_IN    => data_clk_buf,
        CLK_OUT_P => FB_CLK_P_s,
        CLK_OUT_N => open);

    // Here, we have DATA_CLK come through an IBUF followed by a BUFG before
    // routing it to the adc/dac subdevices via the devsignals
    dev_data_clk_out(adc_c).data_clk_p    <= data_clk_buf;
    dev_data_clk_out(dac_c).data_clk_p    <= data_clk_buf;
    dev_data_clk_out(config_c).DATA_CLK_P <= data_clk_buf;

    -- GLOBAL_CLOCK=true (forces use of IBUFG instead of IBUF for Xilinx) was found to
    -- improve clock stability for CMOS mode
    data_clk : BUFFER_IN_1 generic map(DIFFERENTIAL => false, GLOBAL_CLOCK => true)
      port map(I => DATA_CLK_P, O => DATA_CLK_s);

    -- while both BUFG and BUFR met timing for CMOS modes, data fidelity was
    -- observed to be better for BUFG than it was for BUFR
    data_clk_buf_i : buffer_clock_global port map(clk => DATA_CLK_s, clk_buffered => DATA_CLK_buf);

    rx_frame : BUFFER_IN_1 generic map(DIFFERENTIAL => false)
      port map(I => RX_FRAME_P, O => dev_data_adc_out.rx_frame);
    tx_frame : BUFFER_OUT_1 generic map(DIFFERENTIAL => false)
      port map(I => dev_data_dac_in.tx_frame, O => TX_FRAME_P);
    fb_clk   : BUFFER_OUT_1 generic map(DIFFERENTIAL => false)
      port map(I => FB_CLK_P_s, O => FB_CLK_P);
    // The AD9361 datasheet Table 13 recommends to ground these input pins in cmos mode.
    // Note that these signals may or *may not* actually be connected on a given platform/card.
    // If they are, we need to ground them ourselves.
    TX_FRAME_N <= '0';
    FB_CLK_N   <= '0';
  #endif
  #if OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==0
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 0:  single port, half duplex, not swapped
    p0lo: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c/2-1 downto 0),
               O  => dev_data_adc_out.data(port_width_c/2-1 downto 0),
               OE => TXNRX_i,
               IO => p0_d_5_0);
    p0hi: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c-1 downto port_width_c/2),
               O  => dev_data_adc_out.data(port_width_c-1 downto port_width_c/2),
               OE => TXNRX_i,
               IO => p0_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==1
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 1:  single port, half duplex, swapped
    p1lo: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c/2-1 downto 0),
               O  => dev_data_adc_out.data(port_width_c/2-1 downto 0),
               OE => TXNRX_i,
               IO => p1_d_5_0);
    p1hi: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c-1 downto port_width_c/2),
               O  => dev_data_adc_out.data(port_width_c-1 downto port_width_c/2),
               OE => TXNRX_i,
               IO => p1_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==2
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 2:  single port, full duplex, not swapped
    p0lo: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p0_d_5_0, O => dev_data_adc_out.data(port_width_c/2-1 downto 0));
    p0hi: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c/2-1 downto 0), O => p0_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==3
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 3:  single port, full duplex, swapped
    p1lo: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p1_d_5_0, O => dev_data_adc_out.data(port_width_c/2-1 downto 0));
    p1hi: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c/2-1 downto 0), O => p1_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==4
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 4:  dual port, half duplex, swapped or not
    p0lo: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c/2-1 downto 0),
               O  => dev_data_adc_out.data(port_width_c/2-1 downto 0),
               OE => TXNRX_i,
               IO => p0_d_5_0);
    p0hi: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c-1 downto port_width_c/2),
               O  => dev_data_adc_out.data(port_width_c-1 downto port_width_c/2),
               OE => TXNRX_i,
               IO => p0_d_11_6);
    p1lo: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c+port_width_c/2-1 downto port_width_c),
               O  => dev_data_adc_out.data(port_width_c+port_width_c/2-1 downto port_width_c),
               OE => TXNRX_i,
               IO => p1_d_5_0);
    p1hi: TSINOUT_N generic map(width => port_width_c/2)
      port map(I  => dev_data_dac_in.data(port_width_c*2-1 downto port_width_c+port_width_c/2),
               O  => dev_data_adc_out.data(port_width_c*2-1 downto port_width_c+port_width_c/2),
               OE => TXNRX_i,
               IO => p1_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==5
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 5:  dual port, full duplex, not swapped
    p0lo: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p0_d_5_0,
               O => dev_data_adc_out.data(port_width_c/2-1 downto 0));
    p0hi: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p0_d_11_6,
               O => dev_data_adc_out.data(port_width_c-1 downto port_width_c/2));
    p1lo: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c/2-1 downto 0),
               O => p1_d_5_0);
    p1hi: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c-1 downto port_width_c/2),
               O => p1_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==6
  //---------------------------------------------------------------------------------
  // CMOS I/O configuration - mode 6:  dual port, full duplex, swapped
    p1lo: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p1_d_5_0,
               O => dev_data_adc_out.data(port_width_c/2-1 downto 0));
    p1hi: BUFFER_IN_N generic map(width => port_width_c/2, differential => false)
      port map(I => p1_d_11_6,
               O => dev_data_adc_out.data(port_width_c-1 downto port_width_c/2));
    p0lo: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c/2-1 downto 0),
               O => p0_d_5_0);
    p0hi: BUFFER_OUT_N generic map(width => port_width_c/2, differential => false)
      port map(I => dev_data_dac_in.data(port_width_c-1 downto port_width_c/2),
               O => p0_d_11_6);
  #elif OCPI_PARAM_platform_ad9361_data_sub_MODE_p()==7
  //---------------------------------------------------------------------------------
  // LVDS I/O configuration - mode 7:  dual port, full duplex, no port swapping
  // P0 is output/TX/DAC (6 diff pairs) and P1 is input/RX/ADC
  mode7 : block is
    signal out_p, out_n, in_p, in_n : std_logic_vector(lvds_width_c-1 downto 0);
    signal p0 : std_logic_vector(lvds_width_c*2-1 downto 0);
  begin
    dev_data_clk_out(adc_c).data_clk_p    <= DATA_CLK_s;     -- send IBUF version to adc_sub.hdl
    dev_data_clk_out(dac_c).data_clk_p    <= data_clk_n_buf; -- send IBUF->BUFR version to dac_sub.hdl
    dev_data_clk_out(config_c).DATA_CLK_P <= data_clk_n_buf; -- send IBUF->BUFR version to config.hdl

    -- forward (and invert) data_clk_buf
    -- (invert is necessary for ad9361_dac_sub.hdl framing alignment)
    dac_clock_forward : util.util.clock_forward
      generic map(
        INVERT_CLOCK => true,
        INCLUDE_BUF  => false)
      port map(
        RST       => '0',
        CLK_IN    => data_clk_n_buf,
        CLK_OUT_P => FB_CLK_P_s,
        CLK_OUT_N => open);

    data_clk_bufs : ad936x.ad936x.lvds_clock_buffer
      port map(
        data_clk_p => DATA_CLK_P,
        data_clk_n => DATA_CLK_N,
        oclk       => data_clk_n_buf);

    // Instantiate LVDS IO buffers
    rx_frame : BUFFER_IN_1 generic map(DIFFERENTIAL => true)
      port map(I => RX_FRAME_P, IBAR => RX_FRAME_N, O => dev_data_adc_out.rx_frame);
    fb_clk : BUFFER_OUT_1 generic map(DIFFERENTIAL => true)
      port map(I => FB_CLK_P_s, O => FB_CLK_P, OBAR => FB_CLK_N);
    tx_frame : BUFFER_OUT_1 generic map(DIFFERENTIAL => true)
      port map(I => dev_data_dac_in.tx_frame, O => TX_FRAME_P, OBAR => TX_FRAME_N);
    p0p1: for idx in 0 to lvds_width_c/2-1 generate
      p0hi: BUFFER_OUT_1 generic map(DIFFERENTIAL => true)
        port map(I => dev_data_dac_in.data(lvds_width_c/2 + idx),
                 O => p0_d_11_6(idx*2+1), OBAR => p0_d_11_6(idx*2));
      p0lo: BUFFER_OUT_1 generic map(DIFFERENTIAL => true)
        port map(I => dev_data_dac_in.data(idx),
                 O => p0_d_5_0(idx*2+1), OBAR => p0_d_5_0(idx*2));
      p1hi: BUFFER_IN_1 generic map(DIFFERENTIAL => true)
        port map(O => dev_data_adc_out.data(lvds_width_c/2 + idx),
                 I => p1_d_11_6(idx*2+1), IBAR => p1_d_11_6(idx*2));
      p1lo: BUFFER_IN_1 generic map(DIFFERENTIAL => true)
        port map(O => dev_data_adc_out.data(idx),
                 I => p1_d_5_0(idx*2+1), IBAR => p1_d_5_0(idx*2));
    end generate;
  end block;
  #endif

  -- always enable RX for now
  --dev_rxen_config_out.rxen <= dev_rxen_adc_in.rxen;
  dev_rxen_config_out.rxen <= '1'; -- TODO / FIXME - handle this better?

  dev_txen_config_out.txen <= dev_txen_dac_in.txen;
end rtl;
