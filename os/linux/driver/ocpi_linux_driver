#!/bin/sh

# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

# This script loads and unloads the linux driver
# it is intended to be called from another script that checks args etc.

# Retrieve the reserved DMA memory value from the kernel command line
# Note there might be multiple reservations, and we currently only support one (the first).

if test "$OCPI_CDK_DIR" = "" -o "$OCPI_TOOL_DIR" = ""; then
  echo Error: this script "($0)" cannot be run without OCPI_CDK_DIR and OCPI_TOOL_DIR.
  exit 1
fi
if [ $# = 0 ]; then
  echo Error: this script "($0)" needs a command: load, unload, reload, status
  exit 1
fi

MODNAME=opencpi
SUDO=sudo
MODFILE=$MODNAME.ko
RULESFILE=99-$MODNAME.rules
if [ -x /sbin/udevcontrol ] ; then
RELOAD="/sbin/udevcontrol reload_rules"
elif [ -x /sbin/udevadm ] ; then
RELOAD="/sbin/udevadm control --reload-rules"
elif [ -x /bin/udevadm ] ; then
RELOAD="/bin/udevadm control --reload-rules"
elif [ -x /usr/bin/udevadm ] ; then
RELOAD="/usr/bin/udevadm control --reload-rules"
elif [ -x /sbin/mdev -o -x /root/opencpi/bin/mdev ] ; then
# Note: blank RELOAD used to assume mdev below
RELOAD=
SUDO=
RULESFILE=mdev-$MODNAME.rules
MDEVLOC="/sbin/mdev"
# mdev is stored in /root/opencpi/bin/mdev for epiq_matchstiq
[ -x /root/opencpi/bin/mdev ] && MDEVLOC="/root/opencpi/bin/mdev"
else
 echo Error: None of /sbin/udevcontrol, /{sbin,usr/bin}/udevadm, or {/sbin,/root/opencpi/bin}/mdev were found as executables.
 exit 1
fi
# Don't run sudo if already root
if [ $(id -u) = 0 ]; then
  SUDO=
fi
##########################################################################################
# Determine where the driver lives, setting DIR and MODFILE
if [ $# = 2 ] ; then # this is called from the makefile when we are loading what we are building
  DIR=./target-$OCPI_TOOL_DIR
  # RPM-based gets called from within the directory already named after this kernel version:
  case $(pwd) in *$(uname -r)) DIR=.; esac
else
  # Determine the kernel release tag when there could be multiple drivers around
  # If the /etc/opencpi-release file exists, it tells us our own release tag and label for the driver
  if test -f /etc/opencpi-release; then
    read x y LABEL < /etc/opencpi-release
  # The /etc/ocpi-release file is deprecated, and only held the kernel label
  elif test -f /etc/ocpi-release; then
    LABEL=$(cat /etc/ocpi-release)
  else
    LABEL=$(uname -r)
  fi
  # Look for a driver most-specific to least specific
  DIR=$OCPI_CDK_DIR/$OCPI_TOOL_DIR/lib
  DIR2=/opt/opencpi/driver/$(uname -r)
  MODFILE=$MODNAME-$LABEL.ko
  MODFILE2=$MODNAME*.ko
  if test -e $DIR/$MODFILE; then
    true # default
  elif test -e $DIR2/$MODFILE; then
    DIR=$DIR2
  elif test -e $DIR/$MODFILE2; then
    MODFILE=$MODFILE2
  elif test -e $DIR2/$MODFILE2; then
    DIR=$DIR2
    MODFILE=$MODFILE2
  fi
fi
if test "$1" = load -a ! -e $DIR/$MODFILE; then
  echo Error: cannot find driver/file "$MODNAME*.ko".
  exit 1
fi
######## DIR and MODFILE are set and the driver file is verified to exist

MODPATH=$DIR/$MODFILE
RULESPATH=$DIR/$RULESFILE

rudev () {
  if [ "$RELOAD" = '' ] ; then
    sed '/ocpi=/d' < /etc/mdev.conf > /tmp/dmdev.conf
    mv /tmp/dmdev.conf /etc/mdev.conf
  else
    $SUDO rm -f /etc/udev/rules.d/$RULESFILE
    $SUDO $RELOAD
  fi
}

rmd () {
  $SUDO /sbin/rmmod $MODNAME
  if [ $? = 1 ] ; then
    echo Unexpected error unloading driver module.
    exit 1
  fi
  # check /dev?
  sleep 1 # in case udev's processing of the unload takes some time?
  rudev
}

if [ -d /sys/module/opencpi ] ; then
   case $1 in
     (reload|restart)
       echo The driver module is already loaded.  It will be unloaded.
       rmd
       ;;
     (load)
       echo The driver module is already loaded.  No action was taken.
       exit 0
       ;;
     (unload|stop)
       rmd
       echo The driver module was successfully unloaded.
       exit 0
       ;;
     (status)
       echo The driver module is currently loaded.
       exit 0
       ;;
  esac
elif test $1 = unload -o $1 = stop ; then
  echo The driver module is not loaded.  No action was taken.
  exit 0
fi

# AV-1715 - look for opencpi_memmap explicitly first
MEMMAP=`tr ' ' '\n' < /proc/cmdline | grep -m 1 '^opencpi_memmap='`
if [ "$MEMMAP" != "" ] ; then
  echo Found reserved DMA memory on the linux boot command line: [$MEMMAP]
  INSARG=$MEMMAP
fi
if [ "$INSARG" = "" ]; then
  MEMMAP=`tr ' ' '\n' < /proc/cmdline | grep -m 1 '^memmap='`
  if [ "$MEMMAP" = "" ] ; then
    echo No reserved DMA memory found on the linux boot command line.
    INSARG=
  else
    echo Found generic reserved DMA memory on the linux boot command line and assuming it is for OpenCPI: [$MEMMAP]
    INSARG=opencpi_$MEMMAP
  fi
else
  # Check that there's a matching kernel parameter (while preventing empty strings)
  MEMPARAM=`echo $INSARG | cut -f2- -d=`
  if [ "$MEMPARAM" = "" ]; then
    echo [$MEMMAP] seems to have empty value. Ignoring.
    INSARG=
  else
    MEMMAP=`tr ' ' '\n' < /proc/cmdline | grep -m 1 "^memmap=$MEMPARAM"`
    if [ "$MEMMAP" = "" ]; then
      echo Reserved OpenCPI memory [$MEMPARAM] not found in standard memmap parameter. Not using memory space.
      INSARG=
    fi
  fi
fi
if [ ! -r $MODPATH ] ; then
  echo The driver file: \"$MODPATH\" is missing or was never built.
  if [ $1 != status ] ; then
     exit 1
  fi
elif [ $1 = status ] ; then
  read d0 d1 d2 d3 d4 d5<<EOF
`ls -lL $MODPATH`
EOF
  echo The driver file is dated: $d5
fi
if [ $1 = status ] ; then
  echo The driver module is not currently loaded.
  exit 0
fi
if [ "$RELOAD" = '' ] ; then
  # This next line is missing on some mdev platforms and should already be set on other platforms
  echo $MDEVLOC > /proc/sys/kernel/hotplug
  if grep -s ocpi= /etc/mdev.conf; then
    echo The mdev config already has OpenCPI rules.
  else
    echo The mdev config has no OpenCPI rules.  We will add them to /etc/mdev.conf
    cat $RULESPATH >> /etc/mdev.conf
  fi
else
  $SUDO cp $RULESPATH /etc/udev/rules.d &&
  $SUDO $RELOAD
  if test $? != 0; then
    echo "Reload of udev rules failed. ($RELOAD)"
    if [ "$($SUDO stat -c %d:%i /)" == "$($SUDO stat -c %d:%i /proc/1/root/.)" ]; then
      exit 1
    else
      echo "Detected chroot environment. Continuing anyway."
    fi
  fi
fi
$SUDO /sbin/insmod $MODPATH $INSARG
RES=$?
#sudo /sbin/modprobe -v
if [ $RES = 0 ] ; then
  # check /dev?
  echo Driver loaded successfully.
  exit 0
else
  rudev
  echo Driver loading failed.
  exit $RES
fi
