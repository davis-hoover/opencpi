# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

##########################################################################################
# This file specifies what gets built and how, in a way independent of the particular
# "build system" being used.

# The source tree follows these rules
# - all source files are expected to be built as part of the library where they live
# - all source files depend on headers of the place they are in, and places occuring earlier
# - all programs have a main/top file with the suffix _main
# - all programs depend on the library of the place they are in, statically, and earlier libs
# - all programs and libraries can use all runtime prereq libraries

# The syntax of describing places is one line per place, with blank lines and # comments ok

# Specifying places: (source subtrees)
# Places are specified one per line, with directory pathname followed by options
# Default behavior for a place is:
# - library name is basename of pathname (with ocpi_ prefix)
# - resulting library is an exported runtime library, installed in "<platform>/lib"
# - resulting library is OpenCPI code subject to strict warnings etc.
# - resulting library should be available to later libraries and programs (lines after it)
# - any programs found are exported to "<platform>/bin"

# Options (after source tree pathname) are to change the default behavior:
# -l <name>: the library name is not the basename of the directory, but this name
# -n: library is not installed, and is only static, used for programs in the same place
# -f: library is "foreign", built with less strict options since its not OpenCPI code
# -d <dir>: installation subdirectory for programs (under <platform>/bin), default is none
# -D <XX=YY>: value is cpp definition for use when building the library
# -v: library is a driver/plugin
# -I <dir>: value is other dir to look for headers, relative to top of source tree
# -t: library and programs are "tools" not "runtime" and thus depend on subset of runtime libs,
#     will not be built for cross-compiled targets, and not used by runtime programs
# -x <pattern>: source files to ignore in the place
# -s: library members have static constructors and are not necessarily referenced
#     This causes programs to be build with the place's object files, not its library
# -T <program>: a top-level program, overriding the -d <dir> default for programs in the place
# -L <library>: access a library that would not normally be accessible from tools
# -r force programs into the runtime package that are normally considered tools

# There are several "special" lines:
# 1. "prerequisites" which is a list of the *runtime* prerequisite libraries
# 2. "end-of-runtime-for-tools", which marks the end of the runtime libraries usable by tools

# We know, when building:
# 1. The platform we are building (default is the current build machine)
# 2. Whether it is a development platform or a runtime-only platform (default is development)
# 3. Whether it is cross compiled or not (default is not cross compiled)
prerequisites lzma gmp gpsd gtest ad9361
# Host only prereqs are additional prereqs that are built for the host only.
# Essentially, host prereqs = prereqs + host only prereqs
host-only-prerequisites yaml_cpp
# There is lots of leftover/unbuilt stuff in the foreign directories
# Foreign code does not call any of our code
runtime/foreign -f -x .*/pwq/kern/.* -x .*/pwq/src/.*/.* -x .*/uuid/src/.*/.*
# Our OS code might call foreign code, but it cannot call any other OpenCPI code.
os -I os/include -x .*/driver/.* -x .*/winnt/.*
# Our utility code are convenience functions that not really a "layer", and do not call
# any other code other than the OS abstraction, and possibly foreign code
runtime/util -d internal
# Code above this line is not really part of the runtime infrastructure/layers of OpenCPI.
# Tools that use any layers above this must do so explicitly (-I and -L)
end-of-runtime-for-tools
runtime/vfs
# The base library needs to call into the time(emit) layer at shutdown
runtime/base -T ocpixml
# The time library does timekeepping and time-based event recording
runtime/time
runtime/drc/base -l drc
runtime/drc/ad9361 -l drc_ad9361
runtime/dataplane/xfer/base -l xfer
runtime/dataplane/xfer/tests -n -d internal -l xfer_tests
runtime/dataplane/xfer/drivers/datagram -v
runtime/dataplane/xfer/drivers/dma -v
runtime/dataplane/xfer/drivers/ofed -v
runtime/dataplane/xfer/drivers/pio -v
runtime/dataplane/xfer/drivers/socket -v
runtime/dataplane/transport
runtime/metadata
runtime/dataplane/msg_driver_interface -d internal
runtime/dataplane/msg_drivers
runtime/library
runtime/container
runtime/remote -v
# remote-support is not -n since ocpirun/ACI needs it
runtime/remote-support -I runtime/remote/include
runtime/rcc -v
runtime/ocl -v -I runtime/ocl/include/CL
runtime/ocl-support -n -I runtime/ocl/include -I runtime/ocl/include/CL
runtime/hdl -v
runtime/application
runtime/hdl-support -n -I runtime/hdl/include
runtime/ctests -n -d ctests -I runtime/rcc/include
tests/c++tests -d cxxtests -n -s
tools/cdkutils -t
# ocpigen use some runtime libraries that are higher up the stack
# FIXME: ocpigen should not really use these libraries, and there should be
# separate executables that are in the runtime environment, e.g. to do the "prep" for testing
tools/ocpigen -n -t -I tools/cdkutils/include -I runtime/hdl/include -I runtime/library/include -I runtime/ocl/include -I runtime/metadata/include -I runtime/base/include -L cdkutils -L library -L metadata -L base
# ocpisca uses runtime so is not really a "tool" as far as builds go
# but it is actually a tool so it won't be part of the runtime package
# we stash it in "internal" and let the exports file put it into the devel
# Commented out temporarily until
# https://gitlab.com/opencpi/opencpi/-/issues/1277 is fixed
#tools/ocpisca -n -d internal
tools/ocpirh
# This ugliness is a workaround until dev host only prereqs are implemented.
# https://gitlab.com/opencpi/opencpi/-/issues/1367
tools/ocpigr -t -I tools/cdkutils/include -I runtime/metadata/include -I runtime/library/include -L cdkutils -L library -L metadata -I runtime/base/include -L base
tools/ocpigr37 -t -I tools/cdkutils/include -I runtime/metadata/include -I runtime/library/include -L cdkutils -L library -L metadata -I runtime/base/include -L base
tools/ocpidds -d cxxtests -n -r -t -I tools/cdkutils/include -I runtime/metadata/include -I runtime/base/include -L cdkutils -L metadata -L base
