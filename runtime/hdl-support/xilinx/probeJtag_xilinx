#!/bin/bash --noprofile
# This file is protected by Copyright. Please refer to the COPYRIGHT file
# distributed with this source distribution.
#
# This file is part of OpenCPI <http://www.opencpi.org>
#
# OpenCPI is free software: you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# OpenCPI is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program. If not, see <http://www.gnu.org/licenses/>.

if [[ $# == 0 ]]; then
  echo Usage is: `basename $0` '[all|auto]'
  echo '  'This script scans USB ports for Xilinx JTAG cables/pods and
  echo '  'prints which parts are at which positions on each one found.
  echo '  Use "all" to scan for up to 9 cables.  Use "auto" to find the first.'
  exit 1
fi
source $OCPI_CDK_DIR/scripts/util.sh
setVarsFromMake $OCPI_CDK_DIR/include/hdl/xilinx.mk ShellIseVars=1 $verbose
[ -z "$OcpiXilinxLabToolsDir" ] && {
  echo Error: Could not find the directory for XILINX LabTools or ISE.
  exit 1
}

imp="$OcpiXilinxLabToolsDir/bin/lin64/impact"
if test ! -x $imp; then
  echo Error: neither LabTools nor ISE available when trying $imp
  exit 1
fi
temp=/tmp/ocpibitstream$$
tlog=$temp.1
tmp=$temp.2
port=${1:-auto}
function good {
  #rm -f $temp.*
  exit 0
}
function bad {
  rm -f $tmp
  echo Look at $tlog\* for details.
  exit 1
}
dir=`dirname $0`
#part=${1:-xc5vlx50t}
#pos=${2:-1}
#echo part "$part" pos "$pos" port "$port"
# impact expects to overwrite/create this file.  In the off chance that it exists
# and is not writable by us, we remove it first.
# This will still fail if we don't have write permission in the directory,
# but that is what impact will tell us in that case
rm -f _impactbatch.log
impcmd="$imp -batch"
if [[ $port == all ]]; then
  echo listusbcables | $impcmd 2> $tlog > $tmp
  ports=`grep '^port=' $tmp | sed 's/port=\(.*\), .*$/\1/'`
  echo Discovered ports are: $ports
  # ports="usb21 usb22 usb23 usb24 usb25 usb26 usb27 usb28 usb29"
  # exit 1
else
  ports=$port
fi
anyport=
for p in $ports; do
if [[ $p == auto ]]; then
  echo -n Looking for first Xilinx USB port...
else
  echo -n Trying port $p...
fi
myesn=`$dir/getESNfromUSB_xilinx $imp $p`
if test $? == 0; then
  anyport=yes
  echo "  ESN is "$myesn
else
  echo Could not succeed on USB $p.
  continue
fi
any=
for pos in 1 2 3 4 5 6 7 8 9; do
#  echo Trying position $pos
  echo setMode -bs/setCable -p $p/identify/readidcode -p $pos | tr / \\n | $impcmd  2> $tlog.$p.$pos.id 1>&2
  last=$?
  #echo status:$? $tlog.$p.$pos.id 
  if test $last == 0; then
    ed $tlog.$p.$pos.id <<EOF > /dev/null 2>&1
      $
      ?IDCODE?+
      s/^.*Xilinx \([^,]*\),.*\$/\1/p
      1,-d
      2,\$d
      w $tmp
EOF
    mypart=`cat $tmp`
    echo Part at position $pos on $myportlc is $mypart
    any=yes
    continue
    echo setMode -bs/setCable -p $p/identify/readidcode -p $pos/readusercode -p $pos | tr / \\n | $impcmd  2> $tlog.$p.$pos.user 1>&2
    last=$?
    if test $last == 0; then
      ed $tlog.$p.$pos.user <<EOF > /dev/null 2>&1
        $
        ?: Usercode is ?
        s/^.*Usercode is '\([^']*\)'.*\$/\1/p
        1,-d
        2,\$d
        w $tmp
EOF
      myusercode=`cat $tmp`
      echo -n ', 'UserID code is $myusercode
      #cat $tlog
      #mv $tlog $tlog.$myport.$pos
      any=yes
    else
      echo -n ', no UserID'
    fi
    echo setMode -bs/setCable -p $p/identify/readdna -p $pos | tr / \\n | $impcmd  2> $tlog.$p.$pos.dna 1>&2
    last=$?
    if test $last == 0; then
      #cat $tlog
      ed $tlog.$p.$pos.dna <<EOF > /dev/null 2>&1
        $
        ?DNA *= *'?
        s/^.*DNA *= *'\([^']*\)'.*\$/\1/p
        1,-d
        2,\$d
        w $tmp
EOF
      mydna=`cat $tmp`
      if [[ $mydna == "111111111111111111111111111111111111111111111111111111111" ]]; then
         mydna=unavailable
      fi
      echo ', 'DNA code is $mydna
    else
      echo ', 'no DNA code
    fi
  else
    if [[ $any == "" ]]; then
      echo No part with user id at position $pos
    else
      break
    fi
  fi
done
if [[ $any != yes ]]; then
  echo No valid positions found on port $myportlc.
fi
done
if [[ $anyport != yes ]]; then
  bad
else
  good
fi

